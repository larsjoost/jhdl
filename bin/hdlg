#!/bin/bash

ALL_ARGUMENTS=$@

SCRIPT=$(realpath $0)
SCRIPTPATH=$(dirname $SCRIPT)

function error {
    local message=$1
    echo "[ERROR] $SCRIPT: $message" 1>&2
}

usage()
{
    cat << EOF
Command: $0 $ALL_ARGUMENTS

Generates .jhdl.ini scripts which contains mapping from package and entity to file names
	  
usage: $0 options [FILE]

OPTIONS:
   -h           Show this message
   -d <path>    Directory
   -l <name>    Library name
   -w           Force write
   -x           Debug
   -v           Verbose 
EOF
}

DIR="./"

while getopts ":hd:l:vw" OPTION
do
    case $OPTION in
        h)
            usage
            exit 0
            ;;
        l)
            LIBRARY="-l $OPTARG"
            ;;
        d)
            DIR="$OPTARG"
            ;;
        w)
            FORCE_WRITE="True"
	    ;;
        v)
            VERBOSE="-v"
	    set -x
            ;;
        ?)
            echo "Unknown option $OPTARG"
            usage
            exit 1
            ;;
        :)
            echo "No argument value for option $OPTARG"
            usage
            exit 1
            ;;
    esac
done

shift "$((OPTIND-1))"

for i in "$@"; do
    files="$files $(find $DIR -name $i)"
done

if [ -n "$VERBOSE" ]; then
    echo "# Running: hdlg $ALL_ARGUMENTS"
fi

STANDARD_PACKAGE_FILE=$(realpath $SCRIPTPATH/../std/standard.vhd)

if [ ! -e $STANDARD_PACKAGE_FILE ]; then
    error "$STANDARD_PACKAGE_FILE does not exist"
    exit 1
fi

RESULT=0

red=1
green=2

function echo_color {
    local color=$(tty -s && tput setaf $1)
    local reset=$(tty -s && tput sgr0)
    printf "${color}$2${reset} $3\n"
}

TEMPLATE_DIR=$SCRIPTPATH/../templates

if [ ! -e $TEMPLATE_DIR ]; then
    error "Could not find $TEMPLATE_DIR"
    exit 1
fi

function copy_template_files {
    local FILENAME=$1

    TARGETDIR=$(dirname $FILENAME)

    TEMPLATE_FILES=("CMakeLists.txt")
    
    for i in "${TEMPLATE_FILES[@]}"; do
	local target=$TARGETDIR/$i
	if [ ! -e $target ] || [ -n "$FORCE_WRITE" ]; then
	    cp $TEMPLATE_DIR/$i $target
	fi
    done

    templatefiles=$(ls $TEMPLATE_DIR/*.cpp)

    for i in $templatefiles; do
	target=$TARGETDIR/$(basename "$i")
	if [ ! -e $target ]; then
            cp $i $target
	    sed -i "s/%module%/${MODULE_NAME}/g" $target
            sed -i "s/%include%/$headerfile/g" $target
	fi
    done
}

function generate {
    hdld $@
    local EXIT_VALUE=$?
    if [ $EXIT_VALUE -eq 0 ] ; then
        echo_color $green "[SUCCESS]" 
    else
        echo_color $red "[FAILURE]"
        RESULT=1
    fi
}

# If standard package is in file list generate it first

for i in $(echo "$files"); do
    if [ $STANDARD_PACKAGE_FILE == $(realpath $i) ]; then
	echo -n "$i "
	generate $LIBRARY -p $i
	copy_template_files $i
    fi
done

# Then generate the rest of the files in the file list

for i in $(echo "$files"); do
    if [ $STANDARD_PACKAGE_FILE != $(realpath $i) ]; then
	echo -n "$i "
	generate $LIBRARY $i
	copy_template_files $i
    fi
done


exit $RESULT
