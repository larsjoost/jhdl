#!/bin/bash

SCRIPTPATH=$(dirname ${BASH_SOURCE[0]})

function error {
    local message=$1
    echo "[ERROR] $SCRIPT: $message" 1>&2
}

usage()
{
    cat << EOF
Command: $0 $ALL_ARGUMENTS

usage: $0 options [FILE]

OPTIONS:
   -h           Show this message
   -d <name>    Do filename
   -l <name>    Library name
   -o <name>    VCD output filename
   -x           Debug
   -v           Verbose 
EOF
}

MAX_ERRORS=5

library="work"

while getopts ":hd:l:o:vxy" OPTION
do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        d)
            DO_FILE_NAME="-d $OPTARG"
            ;;
        l)
            library="$OPTARG"
            ;;
        o)
            VCD_FILE_NAME="$OPTARG"
            ;;
        v)
            VERBOSE="-v"
	    set -x
            ;;
        x)
            DEBUG="gdb -tui --args"
	    HDLC_DEBUG="-x"
            ;;
        y)
            DEBUG="valgrind -s --leak-check=yes --track-origins=yes --leak-check=full --show-leak-kinds=all"
            ;;
        ?)
            echo "Unknown option $OPTARG"
            usage
            exit 1
            ;;
        :)
            echo "No argument value for option $OPTARG"
            usage
            exit 1
            ;;
    esac
done

shift "$((OPTIND-1))"

for i in "$@"; do
    x=$(find $DIR -name $(basename $i))
    if [ -z "$x" ]; then
	error "Could not find file $i"
	exit 1
    fi
    if [ -n "$FILE_NAME" ]; then
	error "Filename already specified as $FILE_NAME. Found the following file name specificaton $x. Only one file can be simulated."
	exit 1
    fi
    FILE_NAME=$x
done

if [ -z "$FILE_NAME" ]; then
    error "Filename must be specified"
    usage
    exit 1
fi

if [ -z "$JHDL" ]; then
    export JHDL=$SCRIPTPATH/../
fi

filebase="${FILE_NAME%.*}"
headerfile="${library}_$filebase.hpp"
sourcefile="$filebase.cpp"
targetdir=$(dirname $FILE_NAME)
BUILD_PATH=build
ENTITY_NAME=$(hdle -e "%e" $FILE_NAME)
if [ -z "$ENTITY_NAME" ]; then
    error "Did not find entity name in $FILE_NAME" 
    exit 1
fi
ENTITY_NAME_LOWER_CASE=$(echo $ENTITY_NAME  | tr '[:upper:]' '[:lower:]') 
mkdir -p $BUILD_PATH
cd $BUILD_PATH
cmake -DLIBRARY:STRING=$library -DENTITY_NAME:STRING=$ENTITY_NAME_LOWER_CASE -DFILE_NAME:STRING=$FILE_NAME ../
if [ -n "$VCD_FILE_NAME" ]; then
    if [ ! -e $VCD_FILE_NAME ]; then
        mkfifo --mode=666 $VCD_FILE_NAME
    fi
    shmidcat $VCD_FILE_NAME | gtkwave -v -I output.sav &
    $DEBUG ./$filebase $DO_FILE_NAME -o $VCD_FILE_NAME $VERBOSE 
else
    $DEBUG ./$filebase $DO_FILE_NAME $VERBOSE
fi
