#ifndef STD_textio_HPP
#define STD_textio_HPP

#include <string.h>
#include "systemc.h"
#include "vhdl.h"
#include "standard.hpp"
#include "standard.h"
namespace vhdl { namespace STD {
    struct Package_TEXTIO {
      // line 16:     type LINE is access string;
      using LINE = sc_access<STD::STANDARD::STRING>;
      struct Factory_LINE {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        Factory_LINE(Package_TEXTIO* parent)  : p(parent) {}
        LINE create() {
          LINE x;
          return x;
        }
      };
      Factory_LINE factory_LINE = Factory_LINE(this);
      // line 17:     type TEXT is file of string;
      using TEXT = sc_file<STD::STANDARD::STRING>;
      struct Factory_TEXT {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        Factory_TEXT(Package_TEXTIO* parent)  : p(parent) {}
        TEXT create() {
          TEXT x;
          return x;
        }
      };
      Factory_TEXT factory_TEXT = Factory_TEXT(this);
      // line 18:     type SIDE is (right, left);
      enum class SIDE_enum {RIGHT, LEFT};
      struct SIDE_value {
        const static int size = 2;
        const static int enum_size = 2;
        EnumerationElement<SIDE_enum> array[size] {{SIDE_enum::RIGHT, 0, "right"}, {SIDE_enum::LEFT, 0, "left"}};
      };
      using SIDE = Enumeration<SIDE_enum, SIDE_value>;
      struct Factory_SIDE {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        Factory_SIDE(Package_TEXTIO* parent)  : p(parent) {}
        SIDE create() {
          SIDE x;
          return x;
        }
      };
      Factory_SIDE factory_SIDE = Factory_SIDE(this);
      // line 19:     subtype WIDTH is natural;
      using WIDTH = STD::STANDARD::NATURAL;
      struct Factory_WIDTH {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        Factory_WIDTH(Package_TEXTIO* parent)  : p(parent) {}
        WIDTH create() {
          WIDTH x;
          return x;
        }
      };
      Factory_WIDTH factory_WIDTH = Factory_WIDTH(this);
      // line 23:     file input : TEXT open READ_MODE is "STD_INPUT";
      TEXT INPUT = TEXT(READ_MODE, "STD_INPUT");
      // line 24:     file output : TEXT open WRITE_MODE is "STD_OUTPUT";
      TEXT OUTPUT = TEXT(WRITE_MODE, "STD_OUTPUT");
      // line 28:     procedure READLINE(file F: TEXT; L: out LINE);
      struct Procedure_READLINE_text_line__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 28:     procedure READLINE(file F: TEXT; L: out LINE);
        // line 28:     procedure READLINE(file F: TEXT; L: out LINE);
        Procedure_READLINE_text_line__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(TEXT& F, LINE& L);
        void init() {
        }
      };
      void READLINE(TEXT& F, LINE& L);
      // line 30:     procedure READ(L:inout LINE; VALUE: out bit; GOOD : out BOOLEAN);
      struct Procedure_READ_line_bit_boolean__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 30:     procedure READ(L:inout LINE; VALUE: out bit; GOOD : out BOOLEAN);
        // line 30:     procedure READ(L:inout LINE; VALUE: out bit; GOOD : out BOOLEAN);
        // line 30:     procedure READ(L:inout LINE; VALUE: out bit; GOOD : out BOOLEAN);
        Procedure_READ_line_bit_boolean__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::BIT& VALUE, STD::STANDARD::BOOLEAN& GOOD);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::BIT& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 31:     procedure READ(L:inout LINE; VALUE: out bit);
      struct Procedure_READ_line_bit__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 31:     procedure READ(L:inout LINE; VALUE: out bit);
        // line 31:     procedure READ(L:inout LINE; VALUE: out bit);
        Procedure_READ_line_bit__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::BIT& VALUE);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::BIT& VALUE);
      // line 33:     procedure READ(L:inout LINE; VALUE: out bit_vector; GOOD : out BOOLEAN);
      struct Procedure_READ_line_bit_vector_boolean__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 33:     procedure READ(L:inout LINE; VALUE: out bit_vector; GOOD : out BOOLEAN);
        // line 33:     procedure READ(L:inout LINE; VALUE: out bit_vector; GOOD : out BOOLEAN);
        // line 33:     procedure READ(L:inout LINE; VALUE: out bit_vector; GOOD : out BOOLEAN);
        Procedure_READ_line_bit_vector_boolean__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::BIT_VECTOR& VALUE, STD::STANDARD::BOOLEAN& GOOD);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::BIT_VECTOR& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 34:     procedure READ(L:inout LINE; VALUE: out bit_vector);
      struct Procedure_READ_line_bit_vector__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 34:     procedure READ(L:inout LINE; VALUE: out bit_vector);
        // line 34:     procedure READ(L:inout LINE; VALUE: out bit_vector);
        Procedure_READ_line_bit_vector__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::BIT_VECTOR& VALUE);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::BIT_VECTOR& VALUE);
      // line 36:     procedure READ(L:inout LINE; VALUE: out BOOLEAN; GOOD : out BOOLEAN);
      struct Procedure_READ_line_boolean_boolean__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 36:     procedure READ(L:inout LINE; VALUE: out BOOLEAN; GOOD : out BOOLEAN);
        // line 36:     procedure READ(L:inout LINE; VALUE: out BOOLEAN; GOOD : out BOOLEAN);
        // line 36:     procedure READ(L:inout LINE; VALUE: out BOOLEAN; GOOD : out BOOLEAN);
        Procedure_READ_line_boolean_boolean__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::BOOLEAN& VALUE, STD::STANDARD::BOOLEAN& GOOD);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::BOOLEAN& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 37:     procedure READ(L:inout LINE; VALUE: out BOOLEAN);
      struct Procedure_READ_line_boolean__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 37:     procedure READ(L:inout LINE; VALUE: out BOOLEAN);
        // line 37:     procedure READ(L:inout LINE; VALUE: out BOOLEAN);
        Procedure_READ_line_boolean__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::BOOLEAN& VALUE);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::BOOLEAN& VALUE);
      // line 39:     procedure READ(L:inout LINE; VALUE: out character; GOOD : out BOOLEAN);
      struct Procedure_READ_line_character_boolean__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 39:     procedure READ(L:inout LINE; VALUE: out character; GOOD : out BOOLEAN);
        // line 39:     procedure READ(L:inout LINE; VALUE: out character; GOOD : out BOOLEAN);
        // line 39:     procedure READ(L:inout LINE; VALUE: out character; GOOD : out BOOLEAN);
        Procedure_READ_line_character_boolean__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::CHARACTER& VALUE, STD::STANDARD::BOOLEAN& GOOD);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::CHARACTER& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 40:     procedure READ(L:inout LINE; VALUE: out character);
      struct Procedure_READ_line_character__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 40:     procedure READ(L:inout LINE; VALUE: out character);
        // line 40:     procedure READ(L:inout LINE; VALUE: out character);
        Procedure_READ_line_character__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::CHARACTER& VALUE);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::CHARACTER& VALUE);
      // line 42:     procedure READ(L:inout LINE; VALUE: out integer; GOOD : out BOOLEAN);
      struct Procedure_READ_line_integer_boolean__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 42:     procedure READ(L:inout LINE; VALUE: out integer; GOOD : out BOOLEAN);
        // line 42:     procedure READ(L:inout LINE; VALUE: out integer; GOOD : out BOOLEAN);
        // line 42:     procedure READ(L:inout LINE; VALUE: out integer; GOOD : out BOOLEAN);
        Procedure_READ_line_integer_boolean__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::INTEGER& VALUE, STD::STANDARD::BOOLEAN& GOOD);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::INTEGER& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 43:     procedure READ(L:inout LINE; VALUE: out integer);
      struct Procedure_READ_line_integer__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 43:     procedure READ(L:inout LINE; VALUE: out integer);
        // line 43:     procedure READ(L:inout LINE; VALUE: out integer);
        Procedure_READ_line_integer__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::INTEGER& VALUE);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::INTEGER& VALUE);
      // line 45:     procedure READ(L:inout LINE; VALUE: out real; GOOD : out BOOLEAN);
      struct Procedure_READ_line_real_boolean__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 45:     procedure READ(L:inout LINE; VALUE: out real; GOOD : out BOOLEAN);
        // line 45:     procedure READ(L:inout LINE; VALUE: out real; GOOD : out BOOLEAN);
        // line 45:     procedure READ(L:inout LINE; VALUE: out real; GOOD : out BOOLEAN);
        Procedure_READ_line_real_boolean__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::REAL& VALUE, STD::STANDARD::BOOLEAN& GOOD);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::REAL& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 46:     procedure READ(L:inout LINE; VALUE: out real);
      struct Procedure_READ_line_real__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 46:     procedure READ(L:inout LINE; VALUE: out real);
        // line 46:     procedure READ(L:inout LINE; VALUE: out real);
        Procedure_READ_line_real__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::REAL& VALUE);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::REAL& VALUE);
      // line 48:     procedure READ(L:inout LINE; VALUE: out string; GOOD : out BOOLEAN);
      struct Procedure_READ_line_string_boolean__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 48:     procedure READ(L:inout LINE; VALUE: out string; GOOD : out BOOLEAN);
        // line 48:     procedure READ(L:inout LINE; VALUE: out string; GOOD : out BOOLEAN);
        // line 48:     procedure READ(L:inout LINE; VALUE: out string; GOOD : out BOOLEAN);
        Procedure_READ_line_string_boolean__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::STRING& VALUE, STD::STANDARD::BOOLEAN& GOOD);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::STRING& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 49:     procedure READ(L:inout LINE; VALUE: out string);
      struct Procedure_READ_line_string__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 49:     procedure READ(L:inout LINE; VALUE: out string);
        // line 49:     procedure READ(L:inout LINE; VALUE: out string);
        Procedure_READ_line_string__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::STRING& VALUE);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::STRING& VALUE);
      // line 51:     procedure READ(L:inout LINE; VALUE: out time; GOOD : out BOOLEAN);
      struct Procedure_READ_line_time_boolean__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 51:     procedure READ(L:inout LINE; VALUE: out time; GOOD : out BOOLEAN);
        // line 51:     procedure READ(L:inout LINE; VALUE: out time; GOOD : out BOOLEAN);
        // line 51:     procedure READ(L:inout LINE; VALUE: out time; GOOD : out BOOLEAN);
        Procedure_READ_line_time_boolean__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::TIME& VALUE, STD::STANDARD::BOOLEAN& GOOD);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::TIME& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 52:     procedure READ(L:inout LINE; VALUE: out time);
      struct Procedure_READ_line_time__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 52:     procedure READ(L:inout LINE; VALUE: out time);
        // line 52:     procedure READ(L:inout LINE; VALUE: out time);
        Procedure_READ_line_time__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::TIME& VALUE);
        void init() {
        }
      };
      void READ(LINE& L, STD::STANDARD::TIME& VALUE);
      // line 56:     procedure WRITELINE(file F : TEXT; L : inout LINE);
      struct Procedure_WRITELINE_text_line__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 56:     procedure WRITELINE(file F : TEXT; L : inout LINE);
        // line 56:     procedure WRITELINE(file F : TEXT; L : inout LINE);
        Procedure_WRITELINE_text_line__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(TEXT& F, LINE& L);
        void init() {
        }
      };
      void WRITELINE(TEXT& F, LINE& L);
      // line 58:     procedure WRITE(L : inout LINE; VALUE : in bit;
      struct Procedure_WRITE_line_bit_side_width__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 58:     procedure WRITE(L : inout LINE; VALUE : in bit;
        // line 58:     procedure WRITE(L : inout LINE; VALUE : in bit;
        // line 59:        JUSTIFIED: in SIDE := right;
        // line 60:        FIELD: in WIDTH := 0);
        Procedure_WRITE_line_bit_side_width__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::BIT VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
        void init() {
        }
      };
      void WRITE(LINE& L, STD::STANDARD::BIT VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 62:     procedure WRITE(L : inout LINE; VALUE : in bit_vector;
      struct Procedure_WRITE_line_bit_vector_side_width__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 62:     procedure WRITE(L : inout LINE; VALUE : in bit_vector;
        // line 62:     procedure WRITE(L : inout LINE; VALUE : in bit_vector;
        // line 63:        JUSTIFIED: in SIDE := right;
        // line 64:        FIELD: in WIDTH := 0);
        Procedure_WRITE_line_bit_vector_side_width__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::BIT_VECTOR VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
        void init() {
        }
      };
      void WRITE(LINE& L, STD::STANDARD::BIT_VECTOR VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 66:     procedure WRITE(L : inout LINE; VALUE : in BOOLEAN;
      struct Procedure_WRITE_line_boolean_side_width__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 66:     procedure WRITE(L : inout LINE; VALUE : in BOOLEAN;
        // line 66:     procedure WRITE(L : inout LINE; VALUE : in BOOLEAN;
        // line 67:        JUSTIFIED: in SIDE := right;
        // line 68:        FIELD: in WIDTH := 0);
        Procedure_WRITE_line_boolean_side_width__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::BOOLEAN VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
        void init() {
        }
      };
      void WRITE(LINE& L, STD::STANDARD::BOOLEAN VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 70:     procedure WRITE(L : inout LINE; VALUE : in character;
      struct Procedure_WRITE_line_character_side_width__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 70:     procedure WRITE(L : inout LINE; VALUE : in character;
        // line 70:     procedure WRITE(L : inout LINE; VALUE : in character;
        // line 71:        JUSTIFIED: in SIDE := right;
        // line 72:        FIELD: in WIDTH := 0);
        Procedure_WRITE_line_character_side_width__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::CHARACTER VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
        void init() {
        }
      };
      void WRITE(LINE& L, STD::STANDARD::CHARACTER VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 74:     procedure WRITE(L : inout LINE; VALUE : in integer;
      struct Procedure_WRITE_line_integer_side_width__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 74:     procedure WRITE(L : inout LINE; VALUE : in integer;
        // line 74:     procedure WRITE(L : inout LINE; VALUE : in integer;
        // line 75:        JUSTIFIED: in SIDE := right;
        // line 76:        FIELD: in WIDTH := 0);
        Procedure_WRITE_line_integer_side_width__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::INTEGER VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
        void init() {
        }
      };
      void WRITE(LINE& L, STD::STANDARD::INTEGER VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 78:     procedure WRITE(L : inout LINE; VALUE : in real;
      struct Procedure_WRITE_line_real_side_width_natural__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 78:     procedure WRITE(L : inout LINE; VALUE : in real;
        // line 78:     procedure WRITE(L : inout LINE; VALUE : in real;
        // line 79:        JUSTIFIED: in SIDE := right;
        // line 80:        FIELD: in WIDTH := 0;
        // line 81:        DIGITS: in NATURAL := 0);
        Procedure_WRITE_line_real_side_width_natural__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::REAL VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0, STD::STANDARD::NATURAL DIGITS = 0);
        void init() {
        }
      };
      void WRITE(LINE& L, STD::STANDARD::REAL VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0, STD::STANDARD::NATURAL DIGITS = 0);
      // line 83:     procedure WRITE(L : inout LINE; VALUE : in string;
      struct Procedure_WRITE_line_string_side_width__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 83:     procedure WRITE(L : inout LINE; VALUE : in string;
        // line 83:     procedure WRITE(L : inout LINE; VALUE : in string;
        // line 84:        JUSTIFIED: in SIDE := right;
        // line 85:        FIELD: in WIDTH := 0);
        Procedure_WRITE_line_string_side_width__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::STRING VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
        void init() {
        }
      };
      void WRITE(LINE& L, STD::STANDARD::STRING VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 87:     procedure WRITE(L : inout LINE; VALUE : in time;
      struct Procedure_WRITE_line_time_side_width_time__none {
        Package_TEXTIO* p = NULL; // Used to access parent class.
        // line 87:     procedure WRITE(L : inout LINE; VALUE : in time;
        // line 87:     procedure WRITE(L : inout LINE; VALUE : in time;
        // line 88:        JUSTIFIED: in SIDE := right;
        // line 89:        FIELD: in WIDTH := 0;
        // line 90:        UNIT: in TIME := ns);
        Procedure_WRITE_line_time_side_width_time__none(Package_TEXTIO* parent)  : p(parent) {init();}
        void run(LINE& L, STD::STANDARD::TIME VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0, STD::STANDARD::TIME UNIT = STD::STANDARD::TIME_enum::NS);
        void init() {
        }
      };
      void WRITE(LINE& L, STD::STANDARD::TIME VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0, STD::STANDARD::TIME UNIT = STD::STANDARD::TIME_enum::NS);
      // line 28:     procedure READLINE(file F: TEXT; L: out LINE);
      // line 28:     procedure READLINE(file F: TEXT; L: out LINE);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_readline(TEXT& F, LINE& L);
      // line 30:     procedure READ(L:inout LINE; VALUE: out bit; GOOD : out BOOLEAN);
      // line 30:     procedure READ(L:inout LINE; VALUE: out bit; GOOD : out BOOLEAN);
      // line 30:     procedure READ(L:inout LINE; VALUE: out bit; GOOD : out BOOLEAN);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read1(LINE& L, STD::STANDARD::BIT& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 31:     procedure READ(L:inout LINE; VALUE: out bit);
      // line 31:     procedure READ(L:inout LINE; VALUE: out bit);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read2(LINE& L, STD::STANDARD::BIT& VALUE);
      // line 33:     procedure READ(L:inout LINE; VALUE: out bit_vector; GOOD : out BOOLEAN);
      // line 33:     procedure READ(L:inout LINE; VALUE: out bit_vector; GOOD : out BOOLEAN);
      // line 33:     procedure READ(L:inout LINE; VALUE: out bit_vector; GOOD : out BOOLEAN);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read3(LINE& L, STD::STANDARD::BIT_VECTOR& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 34:     procedure READ(L:inout LINE; VALUE: out bit_vector);
      // line 34:     procedure READ(L:inout LINE; VALUE: out bit_vector);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read4(LINE& L, STD::STANDARD::BIT_VECTOR& VALUE);
      // line 36:     procedure READ(L:inout LINE; VALUE: out BOOLEAN; GOOD : out BOOLEAN);
      // line 36:     procedure READ(L:inout LINE; VALUE: out BOOLEAN; GOOD : out BOOLEAN);
      // line 36:     procedure READ(L:inout LINE; VALUE: out BOOLEAN; GOOD : out BOOLEAN);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read5(LINE& L, STD::STANDARD::BOOLEAN& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 37:     procedure READ(L:inout LINE; VALUE: out BOOLEAN);
      // line 37:     procedure READ(L:inout LINE; VALUE: out BOOLEAN);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read6(LINE& L, STD::STANDARD::BOOLEAN& VALUE);
      // line 39:     procedure READ(L:inout LINE; VALUE: out character; GOOD : out BOOLEAN);
      // line 39:     procedure READ(L:inout LINE; VALUE: out character; GOOD : out BOOLEAN);
      // line 39:     procedure READ(L:inout LINE; VALUE: out character; GOOD : out BOOLEAN);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read7(LINE& L, STD::STANDARD::CHARACTER& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 40:     procedure READ(L:inout LINE; VALUE: out character);
      // line 40:     procedure READ(L:inout LINE; VALUE: out character);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read8(LINE& L, STD::STANDARD::CHARACTER& VALUE);
      // line 42:     procedure READ(L:inout LINE; VALUE: out integer; GOOD : out BOOLEAN);
      // line 42:     procedure READ(L:inout LINE; VALUE: out integer; GOOD : out BOOLEAN);
      // line 42:     procedure READ(L:inout LINE; VALUE: out integer; GOOD : out BOOLEAN);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read9(LINE& L, STD::STANDARD::INTEGER& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 43:     procedure READ(L:inout LINE; VALUE: out integer);
      // line 43:     procedure READ(L:inout LINE; VALUE: out integer);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read10(LINE& L, STD::STANDARD::INTEGER& VALUE);
      // line 45:     procedure READ(L:inout LINE; VALUE: out real; GOOD : out BOOLEAN);
      // line 45:     procedure READ(L:inout LINE; VALUE: out real; GOOD : out BOOLEAN);
      // line 45:     procedure READ(L:inout LINE; VALUE: out real; GOOD : out BOOLEAN);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read11(LINE& L, STD::STANDARD::REAL& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 46:     procedure READ(L:inout LINE; VALUE: out real);
      // line 46:     procedure READ(L:inout LINE; VALUE: out real);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read12(LINE& L, STD::STANDARD::REAL& VALUE);
      // line 48:     procedure READ(L:inout LINE; VALUE: out string; GOOD : out BOOLEAN);
      // line 48:     procedure READ(L:inout LINE; VALUE: out string; GOOD : out BOOLEAN);
      // line 48:     procedure READ(L:inout LINE; VALUE: out string; GOOD : out BOOLEAN);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read13(LINE& L, STD::STANDARD::STRING& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 49:     procedure READ(L:inout LINE; VALUE: out string);
      // line 49:     procedure READ(L:inout LINE; VALUE: out string);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read14(LINE& L, STD::STANDARD::STRING& VALUE);
      // line 51:     procedure READ(L:inout LINE; VALUE: out time; GOOD : out BOOLEAN);
      // line 51:     procedure READ(L:inout LINE; VALUE: out time; GOOD : out BOOLEAN);
      // line 51:     procedure READ(L:inout LINE; VALUE: out time; GOOD : out BOOLEAN);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read15(LINE& L, STD::STANDARD::TIME& VALUE, STD::STANDARD::BOOLEAN& GOOD);
      // line 52:     procedure READ(L:inout LINE; VALUE: out time);
      // line 52:     procedure READ(L:inout LINE; VALUE: out time);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_read16(LINE& L, STD::STANDARD::TIME& VALUE);
      // line 56:     procedure WRITELINE(file F : TEXT; L : inout LINE);
      // line 56:     procedure WRITELINE(file F : TEXT; L : inout LINE);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_writeline(TEXT& F, LINE& L);
      // line 58:     procedure WRITE(L : inout LINE; VALUE : in bit;
      // line 58:     procedure WRITE(L : inout LINE; VALUE : in bit;
      // line 59:        JUSTIFIED: in SIDE := right;
      // line 60:        FIELD: in WIDTH := 0);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_write1(LINE& L, STD::STANDARD::BIT VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 62:     procedure WRITE(L : inout LINE; VALUE : in bit_vector;
      // line 62:     procedure WRITE(L : inout LINE; VALUE : in bit_vector;
      // line 63:        JUSTIFIED: in SIDE := right;
      // line 64:        FIELD: in WIDTH := 0);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_write2(LINE& L, STD::STANDARD::BIT_VECTOR VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 66:     procedure WRITE(L : inout LINE; VALUE : in BOOLEAN;
      // line 66:     procedure WRITE(L : inout LINE; VALUE : in BOOLEAN;
      // line 67:        JUSTIFIED: in SIDE := right;
      // line 68:        FIELD: in WIDTH := 0);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_write3(LINE& L, STD::STANDARD::BOOLEAN VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 70:     procedure WRITE(L : inout LINE; VALUE : in character;
      // line 70:     procedure WRITE(L : inout LINE; VALUE : in character;
      // line 71:        JUSTIFIED: in SIDE := right;
      // line 72:        FIELD: in WIDTH := 0);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_write4(LINE& L, STD::STANDARD::CHARACTER VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 74:     procedure WRITE(L : inout LINE; VALUE : in integer;
      // line 74:     procedure WRITE(L : inout LINE; VALUE : in integer;
      // line 75:        JUSTIFIED: in SIDE := right;
      // line 76:        FIELD: in WIDTH := 0);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_write5(LINE& L, STD::STANDARD::INTEGER VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 78:     procedure WRITE(L : inout LINE; VALUE : in real;
      // line 78:     procedure WRITE(L : inout LINE; VALUE : in real;
      // line 79:        JUSTIFIED: in SIDE := right;
      // line 80:        FIELD: in WIDTH := 0;
      // line 81:        DIGITS: in NATURAL := 0);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_write6(LINE& L, STD::STANDARD::REAL VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0, STD::STANDARD::NATURAL DIGITS = 0);
      // line 83:     procedure WRITE(L : inout LINE; VALUE : in string;
      // line 83:     procedure WRITE(L : inout LINE; VALUE : in string;
      // line 84:        JUSTIFIED: in SIDE := right;
      // line 85:        FIELD: in WIDTH := 0);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_write7(LINE& L, STD::STANDARD::STRING VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0);
      // line 87:     procedure WRITE(L : inout LINE; VALUE : in time;
      // line 87:     procedure WRITE(L : inout LINE; VALUE : in time;
      // line 88:        JUSTIFIED: in SIDE := right;
      // line 89:        FIELD: in WIDTH := 0;
      // line 90:        UNIT: in TIME := ns);
      /*
       * This is the definition of the foreign function set as an attribute.
       * The implementation must be defined in a .cpp file in this directory.
       */
      void std_textio_write8(LINE& L, STD::STANDARD::TIME VALUE, SIDE JUSTIFIED = SIDE_enum::RIGHT, WIDTH FIELD = 0, STD::STANDARD::TIME UNIT = STD::STANDARD::TIME_enum::NS);
    };
    using TEXTIO = Package_TEXTIO;
  }
  extern STD::TEXTIO STD_TEXTIO;
  namespace STD {
  }}
#endif
