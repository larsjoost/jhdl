../src/hdlc.sh -f standard.vhd -l std -s -p  
[FUNCTION START] SystemC::generate(library = std)
  [FUNCTION START] SystemC::parse(designFile = standard.vhd, library = std)
    [DEBUG] SystemC::Parsing design unit
    [FUNCTION START] SystemC::packageDeclaration(library = std, packet = STANDARD, type = package)
      [FUNCTION START] SystemC::defineObject(name = STANDARD)
        [FUNCTION START] SystemC::openHierarchy
        [FUNCTION END] SystemC::openHierarchy
        [DEBUG] SystemC::Declaration
        [FUNCTION START] SystemC::declarations
          [FUNCTION START] SystemC::type_declarations(name = BOOLEAN)
            [FUNCTION START] SystemC::enumerationType
              [FUNCTION START] SystemC::PrintFactory(name = BOOLEAN)
                [FUNCTION START] SystemC::PrintTypeObject(name = BOOLEAN)
                  [FUNCTION START] SystemC::defineObject(name = BOOLEAN)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::enumerationType
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = BIT)
            [FUNCTION START] SystemC::enumerationType
              [FUNCTION START] SystemC::PrintFactory(name = BIT)
                [FUNCTION START] SystemC::PrintTypeObject(name = BIT)
                  [FUNCTION START] SystemC::defineObject(name = BIT)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::enumerationType
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = CHARACTER)
            [FUNCTION START] SystemC::enumerationType
              [FUNCTION START] SystemC::PrintFactory(name = CHARACTER)
                [FUNCTION START] SystemC::PrintTypeObject(name = CHARACTER)
                  [FUNCTION START] SystemC::defineObject(name = CHARACTER)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::enumerationType
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = SEVERITY_LEVEL)
            [FUNCTION START] SystemC::enumerationType
              [FUNCTION START] SystemC::PrintFactory(name = SEVERITY_LEVEL)
                [FUNCTION START] SystemC::PrintTypeObject(name = SEVERITY_LEVEL)
                  [FUNCTION START] SystemC::defineObject(name = SEVERITY_LEVEL)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::enumerationType
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = FILE_OPEN_KIND)
            [FUNCTION START] SystemC::enumerationType
              [FUNCTION START] SystemC::PrintFactory(name = FILE_OPEN_KIND)
                [FUNCTION START] SystemC::PrintTypeObject(name = FILE_OPEN_KIND)
                  [FUNCTION START] SystemC::defineObject(name = FILE_OPEN_KIND)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::enumerationType
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = FILE_OPEN_STATUS)
            [FUNCTION START] SystemC::enumerationType
              [FUNCTION START] SystemC::PrintFactory(name = FILE_OPEN_STATUS)
                [FUNCTION START] SystemC::PrintTypeObject(name = FILE_OPEN_STATUS)
                  [FUNCTION START] SystemC::defineObject(name = FILE_OPEN_STATUS)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::enumerationType
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = INTEGER)
            [FUNCTION START] SystemC::numberType(name = INTEGER)
              [FUNCTION START] SystemC::printRangeType
                [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = integer
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 2147483647
    [FUNCTION END] ExpressionParser::expressionToString = -2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::rangeToString
                [FUNCTION START] SystemC::PrintFactory(name = INTEGER, expected_value = number)
                  [FUNCTION START] SystemC::PrintFactory(name = INTEGER)
                    [FUNCTION START] SystemC::PrintTypeObject(name = INTEGER)
                      [FUNCTION START] SystemC::defineObject(name = INTEGER)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = integer
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 2147483647
    [FUNCTION END] ExpressionParser::expressionToString = -2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                        [FUNCTION END] SystemC::rangeToString
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::printRangeType
            [FUNCTION END] SystemC::numberType: integer
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = REAL)
            [FUNCTION START] SystemC::numberType(name = REAL)
              [FUNCTION START] SystemC::printRangeType
                [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = real
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = real
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = real
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = real
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = real
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
    [FUNCTION END] ExpressionParser::expressionToString = -1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::rangeToString
                [FUNCTION START] SystemC::PrintFactory(name = REAL, expected_value = number)
                  [FUNCTION START] SystemC::PrintFactory(name = REAL)
                    [FUNCTION START] SystemC::PrintTypeObject(name = REAL)
                      [FUNCTION START] SystemC::defineObject(name = REAL)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = real
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = real
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = real
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = real
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = real
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
    [FUNCTION END] ExpressionParser::expressionToString = -1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                        [FUNCTION END] SystemC::rangeToString
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::printRangeType
            [FUNCTION END] SystemC::numberType: integer
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = TIME)
            [FUNCTION START] SystemC::numberType(name = TIME)
              [FUNCTION START] SystemC::printPhysicalType
                [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = integer
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 2147483647
    [FUNCTION END] ExpressionParser::expressionToString = -2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::rangeToString
                [FUNCTION START] SystemC::PrintFactory(name = TIME)
                  [FUNCTION START] SystemC::PrintTypeObject(name = TIME)
                    [FUNCTION START] SystemC::defineObject(name = TIME)
                      [FUNCTION START] SystemC::openHierarchy
                      [FUNCTION END] SystemC::openHierarchy
                      [DEBUG] SystemC::Declaration
                      [FUNCTION START] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::defineObject
                  [FUNCTION END] SystemC::PrintTypeObject
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::printPhysicalType
            [FUNCTION END] SystemC::numberType: physical
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::subtype_declarations(name = DELAY_LENGTH)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type TIME: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type TIME: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TIME
            [FUNCTION START] SystemC::PrintFactory(name = DELAY_LENGTH, expected_value = physical)
              [FUNCTION START] SystemC::PrintFactory(name = DELAY_LENGTH)
                [FUNCTION START] SystemC::PrintTypeObject(name = DELAY_LENGTH)
                  [FUNCTION START] SystemC::defineObject(name = DELAY_LENGTH)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::rangeToString(expectedType = physical)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = physical
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Physical
        [FUNCTION START] ExpressionParser::physicalToString
[FUNCTION START] NameConverter::getName::getName(name = FS)
  [DEBUG] NameConverter::getName::Object = std.STANDARD enum FS: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD enum FS: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: TIME_enum::
[FUNCTION END] NameConverter::getName::getName: TIME_enum::FS
        [FUNCTION END] ExpressionParser::physicalToString
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = {0, TIME_enum::FS}
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = TIME)
[0m            [FUNCTION START] ExpressionParser::AttributeReturnTypes
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = physical
            [FUNCTION END] ExpressionParser::AttributeReturnTypes
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = TIME, expected_type = physical)
[0m[32m          [FUNCTION START] ExpressionParser::attributeToString(name = TIME)
[0m            [FUNCTION START] ExpressionParser::findAttributeMatch(name = HIGH)
              [DEBUG] ExpressionParser::objects.empty() = 0
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = physical
            [FUNCTION END] ExpressionParser::findAttributeMatch : 1
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type TIME: physical (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type TIME: physical (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.STANDARD.DELAY_LENGTH, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_TIME.create()
          [FUNCTION END] ExpressionParser::attributeToString: p->factory_TIME.create().HIGH()
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = p->factory_TIME.create().HIGH()
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = p->factory_TIME.create().HIGH()
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                    [FUNCTION END] SystemC::rangeToString
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::PrintFactory
          [FUNCTION END] SystemC::subtype_declarations
          [FUNCTION START] SystemC::function_declarations(name = NOW)
            [FUNCTION START] SystemC::FunctionReturn
[FUNCTION START] NameConverter::getName::getName(name = DELAY_LENGTH)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type DELAY_LENGTH: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type DELAY_LENGTH: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: DELAY_LENGTH
            [FUNCTION END] SystemC::FunctionReturn: name = DELAY_LENGTH, local = 1
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = function, name = NOW, arguments = 
              [DEBUG] SystemC::Match: function NOW: physical [ATTRIBUTE] (hidden)
              [FUNCTION START] SystemC::GetInterface
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
              [FUNCTION END] SystemC::PrintInterface
[FUNCTION START] NameConverter::getName::getName(name = DELAY_LENGTH)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type DELAY_LENGTH: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type DELAY_LENGTH: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: DELAY_LENGTH
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::subtype_declarations(name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type INTEGER: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type INTEGER: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: INTEGER
            [FUNCTION START] SystemC::PrintFactory(name = NATURAL, expected_value = integer)
              [FUNCTION START] SystemC::PrintFactory(name = NATURAL)
                [FUNCTION START] SystemC::PrintTypeObject(name = NATURAL)
                  [FUNCTION START] SystemC::defineObject(name = NATURAL)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::rangeToString(expectedType = integer)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::AttributeReturnTypes
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::AttributeReturnTypes
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = integer
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = integer
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = INTEGER, expected_type = integer)
[0m[32m          [FUNCTION START] ExpressionParser::attributeToString(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::findAttributeMatch(name = HIGH)
              [DEBUG] ExpressionParser::objects.empty() = 0
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::findAttributeMatch : 1
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type INTEGER: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type INTEGER: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.STANDARD.NATURAL, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_INTEGER.create()
          [FUNCTION END] ExpressionParser::attributeToString: p->factory_INTEGER.create().HIGH()
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = p->factory_INTEGER.create().HIGH()
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = p->factory_INTEGER.create().HIGH()
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                    [FUNCTION END] SystemC::rangeToString
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::PrintFactory
          [FUNCTION END] SystemC::subtype_declarations
          [FUNCTION START] SystemC::subtype_declarations(name = POSITIVE)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type INTEGER: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type INTEGER: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: INTEGER
            [FUNCTION START] SystemC::PrintFactory(name = POSITIVE, expected_value = integer)
              [FUNCTION START] SystemC::PrintFactory(name = POSITIVE)
                [FUNCTION START] SystemC::PrintTypeObject(name = POSITIVE)
                  [FUNCTION START] SystemC::defineObject(name = POSITIVE)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::rangeToString(expectedType = integer)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 1
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::AttributeReturnTypes
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::AttributeReturnTypes
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = integer
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = integer
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = INTEGER, expected_type = integer)
[0m[32m          [FUNCTION START] ExpressionParser::attributeToString(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::findAttributeMatch(name = HIGH)
              [DEBUG] ExpressionParser::objects.empty() = 0
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::findAttributeMatch : 1
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type INTEGER: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type INTEGER: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.STANDARD.POSITIVE, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_INTEGER.create()
          [FUNCTION END] ExpressionParser::attributeToString: p->factory_INTEGER.create().HIGH()
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = p->factory_INTEGER.create().HIGH()
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = p->factory_INTEGER.create().HIGH()
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                    [FUNCTION END] SystemC::rangeToString
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::PrintFactory
          [FUNCTION END] SystemC::subtype_declarations
          [FUNCTION START] SystemC::type_declarations(name = STRING)
            [FUNCTION START] SystemC::arrayType
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type CHARACTER: enumeration CHARACTER (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type CHARACTER: enumeration CHARACTER (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: CHARACTER
              [FUNCTION START] SystemC::printArrayType
[FUNCTION START] NameConverter::getName::getName(name = POSITIVE)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type POSITIVE: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type POSITIVE: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: POSITIVE
                [FUNCTION START] SystemC::PrintFactory(name = STRING)
                  [FUNCTION START] SystemC::PrintTypeObject(name = STRING)
                    [FUNCTION START] SystemC::defineObject(name = STRING)
                      [FUNCTION START] SystemC::openHierarchy
                      [FUNCTION END] SystemC::openHierarchy
                      [DEBUG] SystemC::Declaration
                      [FUNCTION START] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::defineObject
                  [FUNCTION END] SystemC::PrintTypeObject
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::printArrayType
            [FUNCTION END] SystemC::arrayType
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = BIT_VECTOR)
            [FUNCTION START] SystemC::arrayType
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type BIT: enumeration BIT (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type BIT: enumeration BIT (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: BIT
              [FUNCTION START] SystemC::printArrayType
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type NATURAL: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type NATURAL: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: NATURAL
                [FUNCTION START] SystemC::PrintFactory(name = BIT_VECTOR)
                  [FUNCTION START] SystemC::PrintTypeObject(name = BIT_VECTOR)
                    [FUNCTION START] SystemC::defineObject(name = BIT_VECTOR)
                      [FUNCTION START] SystemC::openHierarchy
                      [FUNCTION END] SystemC::openHierarchy
                      [DEBUG] SystemC::Declaration
                      [FUNCTION START] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::defineObject
                  [FUNCTION END] SystemC::PrintTypeObject
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::printArrayType
            [FUNCTION END] SystemC::arrayType
            [DEBUG] SystemC::Hierarchy: STD.STANDARD
          [FUNCTION END] SystemC::type_declarations
        [FUNCTION END] SystemC::declarations
        [DEBUG] SystemC::Constructor
        [FUNCTION START] SystemC::closeHierarchy
        [FUNCTION END] SystemC::closeHierarchy
      [FUNCTION END] SystemC::defineObject
    [FUNCTION END] SystemC::packageDeclaration
    [DEBUG] SystemC::Parsing design unit
    [FUNCTION START] SystemC::packageDeclaration(library = std, packet = STANDARD, type = package_body)
      [FUNCTION START] SystemC::defineObject(name = STANDARD)
        [FUNCTION START] SystemC::openHierarchy
        [FUNCTION END] SystemC::openHierarchy
        [DEBUG] SystemC::Declaration
        [FUNCTION START] SystemC::declarations
          [FUNCTION START] SystemC::function_declarations(name = NOW)
            [FUNCTION START] SystemC::FunctionReturn
[FUNCTION START] NameConverter::getName::getName(name = DELAY_LENGTH)
  [DEBUG] NameConverter::getName::Object = std.STANDARD type DELAY_LENGTH: physical (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.STANDARD type DELAY_LENGTH: physical (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: DELAY_LENGTH
            [FUNCTION END] SystemC::FunctionReturn: name = DELAY_LENGTH, local = 1
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = NOW__physical)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = NOW, arguments = 
[32m                [DEBUG] SystemC::Match = function NOW: physical [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = vhdl_now
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
        [FUNCTION END] SystemC::declarations
        [DEBUG] SystemC::Constructor
        [FUNCTION START] SystemC::closeHierarchy
        [FUNCTION END] SystemC::closeHierarchy
      [FUNCTION END] SystemC::defineObject
    [FUNCTION END] SystemC::packageDeclaration
  [FUNCTION END] SystemC::parse
[FUNCTION END] SystemC::generate
../src/hdlc.sh -f env.vhd -l std -s  
[FUNCTION START] SystemC::generate(library = std)
  [FUNCTION START] SystemC::loadPackage(library = STD, name = STANDARD)
    [FUNCTION START] SystemC::parsePackage(library = STD, name = STANDARD)
      [FUNCTION START] SystemC::parse(designFile = /home/ljj/jhdl/src/../std/standard.vhd, library = STD)
        [DEBUG] SystemC::Parsing design unit
        [FUNCTION START] SystemC::packageDeclaration(library = STD, packet = STANDARD, type = package)
          [FUNCTION START] SystemC::defineObject(name = STANDARD)
            [FUNCTION START] SystemC::openHierarchy
            [FUNCTION END] SystemC::openHierarchy
            [DEBUG] SystemC::Declaration
            [FUNCTION START] SystemC::declarations
              [FUNCTION START] SystemC::type_declarations(name = BOOLEAN)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = BOOLEAN)
                    [FUNCTION START] SystemC::PrintTypeObject(name = BOOLEAN)
                      [FUNCTION START] SystemC::defineObject(name = BOOLEAN)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = BIT)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = BIT)
                    [FUNCTION START] SystemC::PrintTypeObject(name = BIT)
                      [FUNCTION START] SystemC::defineObject(name = BIT)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = CHARACTER)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = CHARACTER)
                    [FUNCTION START] SystemC::PrintTypeObject(name = CHARACTER)
                      [FUNCTION START] SystemC::defineObject(name = CHARACTER)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = SEVERITY_LEVEL)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = SEVERITY_LEVEL)
                    [FUNCTION START] SystemC::PrintTypeObject(name = SEVERITY_LEVEL)
                      [FUNCTION START] SystemC::defineObject(name = SEVERITY_LEVEL)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = FILE_OPEN_KIND)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = FILE_OPEN_KIND)
                    [FUNCTION START] SystemC::PrintTypeObject(name = FILE_OPEN_KIND)
                      [FUNCTION START] SystemC::defineObject(name = FILE_OPEN_KIND)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = FILE_OPEN_STATUS)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = FILE_OPEN_STATUS)
                    [FUNCTION START] SystemC::PrintTypeObject(name = FILE_OPEN_STATUS)
                      [FUNCTION START] SystemC::defineObject(name = FILE_OPEN_STATUS)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = INTEGER)
                [FUNCTION START] SystemC::numberType(name = INTEGER)
                  [FUNCTION START] SystemC::printRangeType
                    [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = integer
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 2147483647
    [FUNCTION END] ExpressionParser::expressionToString = -2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                    [FUNCTION END] SystemC::rangeToString
                    [FUNCTION START] SystemC::PrintFactory(name = INTEGER, expected_value = number)
                      [FUNCTION START] SystemC::PrintFactory(name = INTEGER)
                        [FUNCTION START] SystemC::PrintTypeObject(name = INTEGER)
                          [FUNCTION START] SystemC::defineObject(name = INTEGER)
                            [FUNCTION START] SystemC::openHierarchy
                            [FUNCTION END] SystemC::openHierarchy
                            [DEBUG] SystemC::Declaration
                            [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = integer
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 2147483647
    [FUNCTION END] ExpressionParser::expressionToString = -2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                            [FUNCTION END] SystemC::rangeToString
                            [FUNCTION START] SystemC::closeHierarchy
                            [FUNCTION END] SystemC::closeHierarchy
                          [FUNCTION END] SystemC::defineObject
                        [FUNCTION END] SystemC::PrintTypeObject
                      [FUNCTION END] SystemC::PrintFactory
                    [FUNCTION END] SystemC::PrintFactory
                  [FUNCTION END] SystemC::printRangeType
                [FUNCTION END] SystemC::numberType: integer
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = REAL)
                [FUNCTION START] SystemC::numberType(name = REAL)
                  [FUNCTION START] SystemC::printRangeType
                    [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = real
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = real
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = real
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = real
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = real
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
    [FUNCTION END] ExpressionParser::expressionToString = -1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                    [FUNCTION END] SystemC::rangeToString
                    [FUNCTION START] SystemC::PrintFactory(name = REAL, expected_value = number)
                      [FUNCTION START] SystemC::PrintFactory(name = REAL)
                        [FUNCTION START] SystemC::PrintTypeObject(name = REAL)
                          [FUNCTION START] SystemC::defineObject(name = REAL)
                            [FUNCTION START] SystemC::openHierarchy
                            [FUNCTION END] SystemC::openHierarchy
                            [DEBUG] SystemC::Declaration
                            [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = real
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = real
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = real
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = real
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = real
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
    [FUNCTION END] ExpressionParser::expressionToString = -1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                            [FUNCTION END] SystemC::rangeToString
                            [FUNCTION START] SystemC::closeHierarchy
                            [FUNCTION END] SystemC::closeHierarchy
                          [FUNCTION END] SystemC::defineObject
                        [FUNCTION END] SystemC::PrintTypeObject
                      [FUNCTION END] SystemC::PrintFactory
                    [FUNCTION END] SystemC::PrintFactory
                  [FUNCTION END] SystemC::printRangeType
                [FUNCTION END] SystemC::numberType: integer
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = TIME)
                [FUNCTION START] SystemC::numberType(name = TIME)
                  [FUNCTION START] SystemC::printPhysicalType
                    [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = integer
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 2147483647
    [FUNCTION END] ExpressionParser::expressionToString = -2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                    [FUNCTION END] SystemC::rangeToString
                    [FUNCTION START] SystemC::PrintFactory(name = TIME)
                      [FUNCTION START] SystemC::PrintTypeObject(name = TIME)
                        [FUNCTION START] SystemC::defineObject(name = TIME)
                          [FUNCTION START] SystemC::openHierarchy
                          [FUNCTION END] SystemC::openHierarchy
                          [DEBUG] SystemC::Declaration
                          [FUNCTION START] SystemC::closeHierarchy
                          [FUNCTION END] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::defineObject
                      [FUNCTION END] SystemC::PrintTypeObject
                    [FUNCTION END] SystemC::PrintFactory
                  [FUNCTION END] SystemC::printPhysicalType
                [FUNCTION END] SystemC::numberType: physical
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::subtype_declarations(name = DELAY_LENGTH)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TIME
                [FUNCTION START] SystemC::PrintFactory(name = DELAY_LENGTH, expected_value = physical)
                  [FUNCTION START] SystemC::PrintFactory(name = DELAY_LENGTH)
                    [FUNCTION START] SystemC::PrintTypeObject(name = DELAY_LENGTH)
                      [FUNCTION START] SystemC::defineObject(name = DELAY_LENGTH)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::rangeToString(expectedType = physical)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = physical
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Physical
        [FUNCTION START] ExpressionParser::physicalToString
[FUNCTION START] NameConverter::getName::getName(name = FS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum FS: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum FS: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: TIME_enum::
[FUNCTION END] NameConverter::getName::getName: TIME_enum::FS
        [FUNCTION END] ExpressionParser::physicalToString
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = {0, TIME_enum::FS}
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = TIME)
[0m            [FUNCTION START] ExpressionParser::AttributeReturnTypes
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = physical
            [FUNCTION END] ExpressionParser::AttributeReturnTypes
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = TIME, expected_type = physical)
[0m[32m          [FUNCTION START] ExpressionParser::attributeToString(name = TIME)
[0m            [FUNCTION START] ExpressionParser::findAttributeMatch(name = HIGH)
              [DEBUG] ExpressionParser::objects.empty() = 0
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = physical
            [FUNCTION END] ExpressionParser::findAttributeMatch : 1
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.STANDARD.DELAY_LENGTH, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_TIME.create()
          [FUNCTION END] ExpressionParser::attributeToString: p->factory_TIME.create().HIGH()
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = p->factory_TIME.create().HIGH()
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = p->factory_TIME.create().HIGH()
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                        [FUNCTION END] SystemC::rangeToString
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::subtype_declarations
              [FUNCTION START] SystemC::function_declarations(name = NOW)
                [FUNCTION START] SystemC::FunctionReturn
[FUNCTION START] NameConverter::getName::getName(name = DELAY_LENGTH)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type DELAY_LENGTH: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type DELAY_LENGTH: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: DELAY_LENGTH
                [FUNCTION END] SystemC::FunctionReturn: name = DELAY_LENGTH, local = 1
              [FUNCTION END] SystemC::function_declarations
              [FUNCTION START] SystemC::attribute_declarations
                [FUNCTION START] SystemC::ForeignAttribute
                  [DEBUG] SystemC::id = function, name = NOW, arguments = 
                  [DEBUG] SystemC::Match: function NOW: physical [ATTRIBUTE] (hidden)
                  [FUNCTION START] SystemC::GetInterface
                  [FUNCTION END] SystemC::GetInterface
                  [FUNCTION START] SystemC::PrintInterface
                  [FUNCTION END] SystemC::PrintInterface
[FUNCTION START] NameConverter::getName::getName(name = DELAY_LENGTH)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type DELAY_LENGTH: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type DELAY_LENGTH: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: DELAY_LENGTH
                [FUNCTION END] SystemC::ForeignAttribute
              [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION START] SystemC::subtype_declarations(name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: INTEGER
                [FUNCTION START] SystemC::PrintFactory(name = NATURAL, expected_value = integer)
                  [FUNCTION START] SystemC::PrintFactory(name = NATURAL)
                    [FUNCTION START] SystemC::PrintTypeObject(name = NATURAL)
                      [FUNCTION START] SystemC::defineObject(name = NATURAL)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::rangeToString(expectedType = integer)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::AttributeReturnTypes
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::AttributeReturnTypes
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = integer
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = integer
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = INTEGER, expected_type = integer)
[0m[32m          [FUNCTION START] ExpressionParser::attributeToString(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::findAttributeMatch(name = HIGH)
              [DEBUG] ExpressionParser::objects.empty() = 0
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::findAttributeMatch : 1
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.STANDARD.NATURAL, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_INTEGER.create()
          [FUNCTION END] ExpressionParser::attributeToString: p->factory_INTEGER.create().HIGH()
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = p->factory_INTEGER.create().HIGH()
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = p->factory_INTEGER.create().HIGH()
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                        [FUNCTION END] SystemC::rangeToString
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::subtype_declarations
              [FUNCTION START] SystemC::subtype_declarations(name = POSITIVE)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: INTEGER
                [FUNCTION START] SystemC::PrintFactory(name = POSITIVE, expected_value = integer)
                  [FUNCTION START] SystemC::PrintFactory(name = POSITIVE)
                    [FUNCTION START] SystemC::PrintTypeObject(name = POSITIVE)
                      [FUNCTION START] SystemC::defineObject(name = POSITIVE)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::rangeToString(expectedType = integer)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 1
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::AttributeReturnTypes
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::AttributeReturnTypes
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = integer
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = integer
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = INTEGER, expected_type = integer)
[0m[32m          [FUNCTION START] ExpressionParser::attributeToString(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::findAttributeMatch(name = HIGH)
              [DEBUG] ExpressionParser::objects.empty() = 0
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::findAttributeMatch : 1
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.STANDARD.POSITIVE, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_INTEGER.create()
          [FUNCTION END] ExpressionParser::attributeToString: p->factory_INTEGER.create().HIGH()
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = p->factory_INTEGER.create().HIGH()
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = p->factory_INTEGER.create().HIGH()
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                        [FUNCTION END] SystemC::rangeToString
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::subtype_declarations
              [FUNCTION START] SystemC::type_declarations(name = STRING)
                [FUNCTION START] SystemC::arrayType
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: CHARACTER
                  [FUNCTION START] SystemC::printArrayType
[FUNCTION START] NameConverter::getName::getName(name = POSITIVE)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type POSITIVE: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type POSITIVE: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: POSITIVE
                    [FUNCTION START] SystemC::PrintFactory(name = STRING)
                      [FUNCTION START] SystemC::PrintTypeObject(name = STRING)
                        [FUNCTION START] SystemC::defineObject(name = STRING)
                          [FUNCTION START] SystemC::openHierarchy
                          [FUNCTION END] SystemC::openHierarchy
                          [DEBUG] SystemC::Declaration
                          [FUNCTION START] SystemC::closeHierarchy
                          [FUNCTION END] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::defineObject
                      [FUNCTION END] SystemC::PrintTypeObject
                    [FUNCTION END] SystemC::PrintFactory
                  [FUNCTION END] SystemC::printArrayType
                [FUNCTION END] SystemC::arrayType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = BIT_VECTOR)
                [FUNCTION START] SystemC::arrayType
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: BIT
                  [FUNCTION START] SystemC::printArrayType
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: NATURAL
                    [FUNCTION START] SystemC::PrintFactory(name = BIT_VECTOR)
                      [FUNCTION START] SystemC::PrintTypeObject(name = BIT_VECTOR)
                        [FUNCTION START] SystemC::defineObject(name = BIT_VECTOR)
                          [FUNCTION START] SystemC::openHierarchy
                          [FUNCTION END] SystemC::openHierarchy
                          [DEBUG] SystemC::Declaration
                          [FUNCTION START] SystemC::closeHierarchy
                          [FUNCTION END] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::defineObject
                      [FUNCTION END] SystemC::PrintTypeObject
                    [FUNCTION END] SystemC::PrintFactory
                  [FUNCTION END] SystemC::printArrayType
                [FUNCTION END] SystemC::arrayType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
            [FUNCTION END] SystemC::declarations
            [DEBUG] SystemC::Constructor
            [FUNCTION START] SystemC::closeHierarchy
            [FUNCTION END] SystemC::closeHierarchy
          [FUNCTION END] SystemC::defineObject
        [FUNCTION END] SystemC::packageDeclaration
        [DEBUG] SystemC::Parsing design unit
      [FUNCTION END] SystemC::parse
    [FUNCTION END] SystemC::parsePackage(name = STANDARD)
  [FUNCTION END] SystemC::loadPackage
  [FUNCTION START] SystemC::parse(designFile = env.vhd, library = std)
    [DEBUG] SystemC::Parsing design unit
    [FUNCTION START] SystemC::packageDeclaration(library = std, packet = ENV, type = package)
      [FUNCTION START] SystemC::defineObject(name = ENV)
        [FUNCTION START] SystemC::openHierarchy
        [FUNCTION END] SystemC::openHierarchy
        [DEBUG] SystemC::Declaration
        [FUNCTION START] SystemC::declarations
          [FUNCTION START] SystemC::function_declarations(name = STOP)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = STOP)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = FINISH)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = FINISH)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = RESOLUTION_LIMIT)
            [FUNCTION START] SystemC::FunctionReturn
[FUNCTION START] NameConverter::getName::getName(name = DELAY_LENGTH)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type DELAY_LENGTH: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type DELAY_LENGTH: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::DELAY_LENGTH
            [FUNCTION END] SystemC::FunctionReturn: name = STD::STANDARD::DELAY_LENGTH, local = 0
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = STOP, arguments =  : INTEGER(integer)
              [DEBUG] SystemC::Match: procedure STOP(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure STOP: none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = FINISH, arguments =  : INTEGER(integer)
              [DEBUG] SystemC::Match: procedure FINISH(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure FINISH: none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = function, name = RESOLUTION_LIMIT, arguments = 
              [DEBUG] SystemC::Match: function RESOLUTION_LIMIT: physical [ATTRIBUTE] (hidden)
              [FUNCTION START] SystemC::GetInterface
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
              [FUNCTION END] SystemC::PrintInterface
[FUNCTION START] NameConverter::getName::getName(name = DELAY_LENGTH)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type DELAY_LENGTH: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type DELAY_LENGTH: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::DELAY_LENGTH
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
        [FUNCTION END] SystemC::declarations
        [DEBUG] SystemC::Constructor
        [FUNCTION START] SystemC::closeHierarchy
        [FUNCTION END] SystemC::closeHierarchy
      [FUNCTION END] SystemC::defineObject
    [FUNCTION END] SystemC::packageDeclaration
    [DEBUG] SystemC::Parsing design unit
    [FUNCTION START] SystemC::packageDeclaration(library = std, packet = ENV, type = package_body)
      [FUNCTION START] SystemC::defineObject(name = ENV)
        [FUNCTION START] SystemC::openHierarchy
        [FUNCTION END] SystemC::openHierarchy
        [DEBUG] SystemC::Declaration
        [FUNCTION START] SystemC::declarations
          [FUNCTION START] SystemC::function_declarations(name = STOP)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = STOP_integer__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = STOP, arguments = STATUS : INTEGER(integer)
[32m                [DEBUG] SystemC::Match = procedure STOP(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure STOP: none (hidden)
[0m                [DEBUG] SystemC::Foreign name = vhdl_stop
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = STOP)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = STOP__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = STOP, arguments = 
[31m                [DEBUG] SystemC::Different = procedure STOP(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure STOP: none (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure STOP(STATUS : INTEGER(integer)): none (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure STOP: none (hidden)
[0mDid not find any matches of STOP
Found global: std.ENV procedure STOP(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden) (global)
Found global: std.ENV procedure STOP: none (hidden) (global)
Found local: std.ENV procedure STOP(STATUS : INTEGER(integer)): none (hidden) (local)
Found local: std.ENV procedure STOP: none (hidden) (local)
                [DEBUG] SystemC::Did not find attribute of function STOP
                [DEBUG] SystemC::Foreign name = 
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::procedureCallStatement
[FUNCTION START] ExpressionParser::procedureCallStatementToString(name = STOP)
  [FUNCTION START] ExpressionParser::toObjectArguments
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
  [FUNCTION END] ExpressionParser::toObjectArguments =  (integer)
[32m  [DEBUG] ExpressionParser::procedure STOP(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden) == STOP( (integer))
[0m[31m  [DEBUG] ExpressionParser::procedure STOP: none (hidden) != STOP( (integer))
[0m  [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = STOP)
  [DEBUG] NameConverter::getName::Object = std.ENV procedure STOP(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.ENV procedure STOP(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.ENV.STOP__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->
[FUNCTION END] NameConverter::getName::getName: p->STOP
    [DEBUG] ExpressionParser::name = p->STOP: std.ENV procedure STOP(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden) (global)
    [FUNCTION START] ExpressionParser::parametersToString
[32m      [FUNCTION START] ExpressionParser::associateArgument, interfaceElement = STATUS : INTEGER(integer)
[0m        [FUNCTION START] ExpressionParser::expressionToString
          [FUNCTION START] ExpressionParser::expressionTermToString
            [DEBUG] ExpressionParser::Number
          [FUNCTION END] ExpressionParser::expressionTermToString
        [FUNCTION END] ExpressionParser::expressionToString = 0
        [DEBUG] ExpressionParser::Actual part = 0
        [DEBUG] ExpressionParser::Association number 0 match
      [FUNCTION END] ExpressionParser::associateArgument = 0
    [FUNCTION END] ExpressionParser::parametersToString
  [FUNCTION END] ExpressionParser::objectToString = p->STOP(0)
[FUNCTION END] ExpressionParser::procedureCallStatementToString
                [FUNCTION END] SystemC::procedureCallStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = FINISH)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = FINISH_integer__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = FINISH, arguments = STATUS : INTEGER(integer)
[32m                [DEBUG] SystemC::Match = procedure FINISH(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure FINISH: none (hidden)
[0m                [DEBUG] SystemC::Foreign name = vhdl_finish
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = STATUS, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = FINISH)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = FINISH__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = FINISH, arguments = 
[31m                [DEBUG] SystemC::Different = procedure FINISH(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure FINISH: none (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure FINISH(STATUS : INTEGER(integer)): none (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure FINISH: none (hidden)
[0mDid not find any matches of FINISH
Found global: std.ENV procedure FINISH(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden) (global)
Found global: std.ENV procedure FINISH: none (hidden) (global)
Found local: std.ENV procedure FINISH(STATUS : INTEGER(integer)): none (hidden) (local)
Found local: std.ENV procedure FINISH: none (hidden) (local)
                [DEBUG] SystemC::Did not find attribute of function FINISH
                [DEBUG] SystemC::Foreign name = 
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::procedureCallStatement
[FUNCTION START] ExpressionParser::procedureCallStatementToString(name = FINISH)
  [FUNCTION START] ExpressionParser::toObjectArguments
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
  [FUNCTION END] ExpressionParser::toObjectArguments =  (integer)
[32m  [DEBUG] ExpressionParser::procedure FINISH(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden) == FINISH( (integer))
[0m[31m  [DEBUG] ExpressionParser::procedure FINISH: none (hidden) != FINISH( (integer))
[0m  [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = FINISH)
  [DEBUG] NameConverter::getName::Object = std.ENV procedure FINISH(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.ENV procedure FINISH(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.ENV.FINISH__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->
[FUNCTION END] NameConverter::getName::getName: p->FINISH
    [DEBUG] ExpressionParser::name = p->FINISH: std.ENV procedure FINISH(STATUS : INTEGER(integer)): none [ATTRIBUTE] (hidden) (global)
    [FUNCTION START] ExpressionParser::parametersToString
[32m      [FUNCTION START] ExpressionParser::associateArgument, interfaceElement = STATUS : INTEGER(integer)
[0m        [FUNCTION START] ExpressionParser::expressionToString
          [FUNCTION START] ExpressionParser::expressionTermToString
            [DEBUG] ExpressionParser::Number
          [FUNCTION END] ExpressionParser::expressionTermToString
        [FUNCTION END] ExpressionParser::expressionToString = 0
        [DEBUG] ExpressionParser::Actual part = 0
        [DEBUG] ExpressionParser::Association number 0 match
      [FUNCTION END] ExpressionParser::associateArgument = 0
    [FUNCTION END] ExpressionParser::parametersToString
  [FUNCTION END] ExpressionParser::objectToString = p->FINISH(0)
[FUNCTION END] ExpressionParser::procedureCallStatementToString
                [FUNCTION END] SystemC::procedureCallStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = RESOLUTION_LIMIT)
            [FUNCTION START] SystemC::FunctionReturn
[FUNCTION START] NameConverter::getName::getName(name = DELAY_LENGTH)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type DELAY_LENGTH: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type DELAY_LENGTH: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::DELAY_LENGTH
            [FUNCTION END] SystemC::FunctionReturn: name = STD::STANDARD::DELAY_LENGTH, local = 0
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = RESOLUTION_LIMIT__physical)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = RESOLUTION_LIMIT, arguments = 
[32m                [DEBUG] SystemC::Match = function RESOLUTION_LIMIT: physical [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = vhdl_resolution_limit
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::returnStatement
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Physical
        [FUNCTION START] ExpressionParser::physicalToString
[FUNCTION START] NameConverter::getName::getName(name = NS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum NS: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum NS: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::TIME_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME_enum::NS
        [FUNCTION END] ExpressionParser::physicalToString
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = {0, STD::STANDARD::TIME_enum::NS}
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::returnStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
        [FUNCTION END] SystemC::declarations
        [DEBUG] SystemC::Constructor
        [FUNCTION START] SystemC::closeHierarchy
        [FUNCTION END] SystemC::closeHierarchy
      [FUNCTION END] SystemC::defineObject
    [FUNCTION END] SystemC::packageDeclaration
  [FUNCTION END] SystemC::parse
[FUNCTION END] SystemC::generate
../src/hdlc.sh -f textio.vhd -l std -s
[FUNCTION START] SystemC::generate(library = std)
  [FUNCTION START] SystemC::loadPackage(library = STD, name = STANDARD)
    [FUNCTION START] SystemC::parsePackage(library = STD, name = STANDARD)
      [FUNCTION START] SystemC::parse(designFile = /home/ljj/jhdl/src/../std/standard.vhd, library = STD)
        [DEBUG] SystemC::Parsing design unit
        [FUNCTION START] SystemC::packageDeclaration(library = STD, packet = STANDARD, type = package)
          [FUNCTION START] SystemC::defineObject(name = STANDARD)
            [FUNCTION START] SystemC::openHierarchy
            [FUNCTION END] SystemC::openHierarchy
            [DEBUG] SystemC::Declaration
            [FUNCTION START] SystemC::declarations
              [FUNCTION START] SystemC::type_declarations(name = BOOLEAN)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = BOOLEAN)
                    [FUNCTION START] SystemC::PrintTypeObject(name = BOOLEAN)
                      [FUNCTION START] SystemC::defineObject(name = BOOLEAN)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = BIT)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = BIT)
                    [FUNCTION START] SystemC::PrintTypeObject(name = BIT)
                      [FUNCTION START] SystemC::defineObject(name = BIT)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = CHARACTER)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = CHARACTER)
                    [FUNCTION START] SystemC::PrintTypeObject(name = CHARACTER)
                      [FUNCTION START] SystemC::defineObject(name = CHARACTER)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = SEVERITY_LEVEL)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = SEVERITY_LEVEL)
                    [FUNCTION START] SystemC::PrintTypeObject(name = SEVERITY_LEVEL)
                      [FUNCTION START] SystemC::defineObject(name = SEVERITY_LEVEL)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = FILE_OPEN_KIND)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = FILE_OPEN_KIND)
                    [FUNCTION START] SystemC::PrintTypeObject(name = FILE_OPEN_KIND)
                      [FUNCTION START] SystemC::defineObject(name = FILE_OPEN_KIND)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = FILE_OPEN_STATUS)
                [FUNCTION START] SystemC::enumerationType
                  [FUNCTION START] SystemC::PrintFactory(name = FILE_OPEN_STATUS)
                    [FUNCTION START] SystemC::PrintTypeObject(name = FILE_OPEN_STATUS)
                      [FUNCTION START] SystemC::defineObject(name = FILE_OPEN_STATUS)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::enumerationType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = INTEGER)
                [FUNCTION START] SystemC::numberType(name = INTEGER)
                  [FUNCTION START] SystemC::printRangeType
                    [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = integer
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 2147483647
    [FUNCTION END] ExpressionParser::expressionToString = -2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                    [FUNCTION END] SystemC::rangeToString
                    [FUNCTION START] SystemC::PrintFactory(name = INTEGER, expected_value = number)
                      [FUNCTION START] SystemC::PrintFactory(name = INTEGER)
                        [FUNCTION START] SystemC::PrintTypeObject(name = INTEGER)
                          [FUNCTION START] SystemC::defineObject(name = INTEGER)
                            [FUNCTION START] SystemC::openHierarchy
                            [FUNCTION END] SystemC::openHierarchy
                            [DEBUG] SystemC::Declaration
                            [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = integer
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 2147483647
    [FUNCTION END] ExpressionParser::expressionToString = -2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                            [FUNCTION END] SystemC::rangeToString
                            [FUNCTION START] SystemC::closeHierarchy
                            [FUNCTION END] SystemC::closeHierarchy
                          [FUNCTION END] SystemC::defineObject
                        [FUNCTION END] SystemC::PrintTypeObject
                      [FUNCTION END] SystemC::PrintFactory
                    [FUNCTION END] SystemC::PrintFactory
                  [FUNCTION END] SystemC::printRangeType
                [FUNCTION END] SystemC::numberType: integer
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = REAL)
                [FUNCTION START] SystemC::numberType(name = REAL)
                  [FUNCTION START] SystemC::printRangeType
                    [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = real
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = real
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = real
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = real
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = real
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
    [FUNCTION END] ExpressionParser::expressionToString = -1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                    [FUNCTION END] SystemC::rangeToString
                    [FUNCTION START] SystemC::PrintFactory(name = REAL, expected_value = number)
                      [FUNCTION START] SystemC::PrintFactory(name = REAL)
                        [FUNCTION START] SystemC::PrintTypeObject(name = REAL)
                          [FUNCTION START] SystemC::defineObject(name = REAL)
                            [FUNCTION START] SystemC::openHierarchy
                            [FUNCTION END] SystemC::openHierarchy
                            [DEBUG] SystemC::Declaration
                            [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = real
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = real
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = real
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = real
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = real
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
    [FUNCTION END] ExpressionParser::expressionToString = -1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = real
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = real
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 1.7014111e+308
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                            [FUNCTION END] SystemC::rangeToString
                            [FUNCTION START] SystemC::closeHierarchy
                            [FUNCTION END] SystemC::closeHierarchy
                          [FUNCTION END] SystemC::defineObject
                        [FUNCTION END] SystemC::PrintTypeObject
                      [FUNCTION END] SystemC::PrintFactory
                    [FUNCTION END] SystemC::PrintFactory
                  [FUNCTION END] SystemC::printRangeType
                [FUNCTION END] SystemC::numberType: integer
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = TIME)
                [FUNCTION START] SystemC::numberType(name = TIME)
                  [FUNCTION START] SystemC::printPhysicalType
                    [FUNCTION START] SystemC::rangeToString(expectedType = number)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
      [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m        [DEBUG] ExpressionParser::Result = integer
[0m      [FUNCTION END] ExpressionParser::ReturnTypesToString
    [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionReturnTypes
          [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
          [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m            [DEBUG] ExpressionParser::Result = integer
[0m          [FUNCTION END] ExpressionParser::ReturnTypesToString
        [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionToString
        [FUNCTION START] ExpressionParser::expressionTermToString
          [DEBUG] ExpressionParser::Number
        [FUNCTION END] ExpressionParser::expressionTermToString
      [FUNCTION END] ExpressionParser::expressionToString = 2147483647
    [FUNCTION END] ExpressionParser::expressionToString = -2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 2147483647
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                    [FUNCTION END] SystemC::rangeToString
                    [FUNCTION START] SystemC::PrintFactory(name = TIME)
                      [FUNCTION START] SystemC::PrintTypeObject(name = TIME)
                        [FUNCTION START] SystemC::defineObject(name = TIME)
                          [FUNCTION START] SystemC::openHierarchy
                          [FUNCTION END] SystemC::openHierarchy
                          [DEBUG] SystemC::Declaration
                          [FUNCTION START] SystemC::closeHierarchy
                          [FUNCTION END] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::defineObject
                      [FUNCTION END] SystemC::PrintTypeObject
                    [FUNCTION END] SystemC::PrintFactory
                  [FUNCTION END] SystemC::printPhysicalType
                [FUNCTION END] SystemC::numberType: physical
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::subtype_declarations(name = DELAY_LENGTH)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TIME
                [FUNCTION START] SystemC::PrintFactory(name = DELAY_LENGTH, expected_value = physical)
                  [FUNCTION START] SystemC::PrintFactory(name = DELAY_LENGTH)
                    [FUNCTION START] SystemC::PrintTypeObject(name = DELAY_LENGTH)
                      [FUNCTION START] SystemC::defineObject(name = DELAY_LENGTH)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::rangeToString(expectedType = physical)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = physical
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Physical
        [FUNCTION START] ExpressionParser::physicalToString
[FUNCTION START] NameConverter::getName::getName(name = FS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum FS: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum FS: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: TIME_enum::
[FUNCTION END] NameConverter::getName::getName: TIME_enum::FS
        [FUNCTION END] ExpressionParser::physicalToString
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = {0, TIME_enum::FS}
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = TIME)
[0m            [FUNCTION START] ExpressionParser::AttributeReturnTypes
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = physical
            [FUNCTION END] ExpressionParser::AttributeReturnTypes
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = TIME, expected_type = physical)
[0m[32m          [FUNCTION START] ExpressionParser::attributeToString(name = TIME)
[0m            [FUNCTION START] ExpressionParser::findAttributeMatch(name = HIGH)
              [DEBUG] ExpressionParser::objects.empty() = 0
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = physical
            [FUNCTION END] ExpressionParser::findAttributeMatch : 1
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.STANDARD.DELAY_LENGTH, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_TIME.create()
          [FUNCTION END] ExpressionParser::attributeToString: p->factory_TIME.create().HIGH()
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = p->factory_TIME.create().HIGH()
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = p->factory_TIME.create().HIGH()
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                        [FUNCTION END] SystemC::rangeToString
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::subtype_declarations
              [FUNCTION START] SystemC::function_declarations(name = NOW)
                [FUNCTION START] SystemC::FunctionReturn
[FUNCTION START] NameConverter::getName::getName(name = DELAY_LENGTH)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type DELAY_LENGTH: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type DELAY_LENGTH: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: DELAY_LENGTH
                [FUNCTION END] SystemC::FunctionReturn: name = DELAY_LENGTH, local = 1
              [FUNCTION END] SystemC::function_declarations
              [FUNCTION START] SystemC::attribute_declarations
                [FUNCTION START] SystemC::ForeignAttribute
                  [DEBUG] SystemC::id = function, name = NOW, arguments = 
                  [DEBUG] SystemC::Match: function NOW: physical [ATTRIBUTE] (hidden)
                  [FUNCTION START] SystemC::GetInterface
                  [FUNCTION END] SystemC::GetInterface
                  [FUNCTION START] SystemC::PrintInterface
                  [FUNCTION END] SystemC::PrintInterface
[FUNCTION START] NameConverter::getName::getName(name = DELAY_LENGTH)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type DELAY_LENGTH: physical (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type DELAY_LENGTH: physical (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: DELAY_LENGTH
                [FUNCTION END] SystemC::ForeignAttribute
              [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION START] SystemC::subtype_declarations(name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: INTEGER
                [FUNCTION START] SystemC::PrintFactory(name = NATURAL, expected_value = integer)
                  [FUNCTION START] SystemC::PrintFactory(name = NATURAL)
                    [FUNCTION START] SystemC::PrintTypeObject(name = NATURAL)
                      [FUNCTION START] SystemC::defineObject(name = NATURAL)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::rangeToString(expectedType = integer)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::AttributeReturnTypes
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::AttributeReturnTypes
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = integer
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = integer
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = INTEGER, expected_type = integer)
[0m[32m          [FUNCTION START] ExpressionParser::attributeToString(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::findAttributeMatch(name = HIGH)
              [DEBUG] ExpressionParser::objects.empty() = 0
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::findAttributeMatch : 1
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.STANDARD.NATURAL, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_INTEGER.create()
          [FUNCTION END] ExpressionParser::attributeToString: p->factory_INTEGER.create().HIGH()
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = p->factory_INTEGER.create().HIGH()
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = p->factory_INTEGER.create().HIGH()
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                        [FUNCTION END] SystemC::rangeToString
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::subtype_declarations
              [FUNCTION START] SystemC::subtype_declarations(name = POSITIVE)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: INTEGER
                [FUNCTION START] SystemC::PrintFactory(name = POSITIVE, expected_value = integer)
                  [FUNCTION START] SystemC::PrintFactory(name = POSITIVE)
                    [FUNCTION START] SystemC::PrintTypeObject(name = POSITIVE)
                      [FUNCTION START] SystemC::defineObject(name = POSITIVE)
                        [FUNCTION START] SystemC::openHierarchy
                        [FUNCTION END] SystemC::openHierarchy
                        [DEBUG] SystemC::Declaration
                        [FUNCTION START] SystemC::rangeToString(expectedType = integer)
[FUNCTION START] ExpressionParser::CollectAllReturnTypes
  [FUNCTION START] ExpressionParser::ExpressionReturnTypes
    [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
    [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m      [DEBUG] ExpressionParser::Result = integer
[0m    [FUNCTION END] ExpressionParser::ReturnTypesToString
  [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
[FUNCTION END] ExpressionParser::CollectAllReturnTypes
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 1
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::AttributeReturnTypes
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::AttributeReturnTypes
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = integer
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = integer
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = INTEGER, expected_type = integer)
[0m[32m          [FUNCTION START] ExpressionParser::attributeToString(name = INTEGER)
[0m            [FUNCTION START] ExpressionParser::findAttributeMatch(name = HIGH)
              [DEBUG] ExpressionParser::objects.empty() = 0
              [FUNCTION START] ExpressionParser::getAttributeType(attributeName = HIGH)
              [FUNCTION END] ExpressionParser::getAttributeType = integer
            [FUNCTION END] ExpressionParser::findAttributeMatch : 1
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.STANDARD.POSITIVE, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_INTEGER.create()
          [FUNCTION END] ExpressionParser::attributeToString: p->factory_INTEGER.create().HIGH()
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = p->factory_INTEGER.create().HIGH()
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = p->factory_INTEGER.create().HIGH()
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                        [FUNCTION END] SystemC::rangeToString
                        [FUNCTION START] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::defineObject
                    [FUNCTION END] SystemC::PrintTypeObject
                  [FUNCTION END] SystemC::PrintFactory
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::subtype_declarations
              [FUNCTION START] SystemC::type_declarations(name = STRING)
                [FUNCTION START] SystemC::arrayType
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: CHARACTER
                  [FUNCTION START] SystemC::printArrayType
[FUNCTION START] NameConverter::getName::getName(name = POSITIVE)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type POSITIVE: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type POSITIVE: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: POSITIVE
                    [FUNCTION START] SystemC::PrintFactory(name = STRING)
                      [FUNCTION START] SystemC::PrintTypeObject(name = STRING)
                        [FUNCTION START] SystemC::defineObject(name = STRING)
                          [FUNCTION START] SystemC::openHierarchy
                          [FUNCTION END] SystemC::openHierarchy
                          [DEBUG] SystemC::Declaration
                          [FUNCTION START] SystemC::closeHierarchy
                          [FUNCTION END] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::defineObject
                      [FUNCTION END] SystemC::PrintTypeObject
                    [FUNCTION END] SystemC::PrintFactory
                  [FUNCTION END] SystemC::printArrayType
                [FUNCTION END] SystemC::arrayType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
              [FUNCTION START] SystemC::type_declarations(name = BIT_VECTOR)
                [FUNCTION START] SystemC::arrayType
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: BIT
                  [FUNCTION START] SystemC::printArrayType
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: NATURAL
                    [FUNCTION START] SystemC::PrintFactory(name = BIT_VECTOR)
                      [FUNCTION START] SystemC::PrintTypeObject(name = BIT_VECTOR)
                        [FUNCTION START] SystemC::defineObject(name = BIT_VECTOR)
                          [FUNCTION START] SystemC::openHierarchy
                          [FUNCTION END] SystemC::openHierarchy
                          [DEBUG] SystemC::Declaration
                          [FUNCTION START] SystemC::closeHierarchy
                          [FUNCTION END] SystemC::closeHierarchy
                        [FUNCTION END] SystemC::defineObject
                      [FUNCTION END] SystemC::PrintTypeObject
                    [FUNCTION END] SystemC::PrintFactory
                  [FUNCTION END] SystemC::printArrayType
                [FUNCTION END] SystemC::arrayType
                [DEBUG] SystemC::Hierarchy: STD.STANDARD
              [FUNCTION END] SystemC::type_declarations
            [FUNCTION END] SystemC::declarations
            [DEBUG] SystemC::Constructor
            [FUNCTION START] SystemC::closeHierarchy
            [FUNCTION END] SystemC::closeHierarchy
          [FUNCTION END] SystemC::defineObject
        [FUNCTION END] SystemC::packageDeclaration
        [DEBUG] SystemC::Parsing design unit
      [FUNCTION END] SystemC::parse
    [FUNCTION END] SystemC::parsePackage(name = STANDARD)
  [FUNCTION END] SystemC::loadPackage
  [FUNCTION START] SystemC::parse(designFile = textio.vhd, library = std)
    [DEBUG] SystemC::Parsing design unit
    [FUNCTION START] SystemC::packageDeclaration(library = std, packet = TEXTIO, type = package)
      [FUNCTION START] SystemC::defineObject(name = TEXTIO)
        [FUNCTION START] SystemC::openHierarchy
        [FUNCTION END] SystemC::openHierarchy
        [DEBUG] SystemC::Declaration
        [FUNCTION START] SystemC::declarations
          [FUNCTION START] SystemC::type_declarations(name = LINE)
            [FUNCTION START] SystemC::AccessType
              [FUNCTION START] SystemC::SimpleType
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
                [FUNCTION START] SystemC::PrintFactory(name = LINE)
                  [FUNCTION START] SystemC::PrintTypeObject(name = LINE)
                    [FUNCTION START] SystemC::defineObject(name = LINE)
                      [FUNCTION START] SystemC::openHierarchy
                      [FUNCTION END] SystemC::openHierarchy
                      [DEBUG] SystemC::Declaration
                      [FUNCTION START] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::defineObject
                  [FUNCTION END] SystemC::PrintTypeObject
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::SimpleType
            [FUNCTION END] SystemC::AccessType
            [DEBUG] SystemC::Hierarchy: STD.TEXTIO
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = TEXT)
            [FUNCTION START] SystemC::FileType
              [FUNCTION START] SystemC::SimpleType
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
                [FUNCTION START] SystemC::PrintFactory(name = TEXT)
                  [FUNCTION START] SystemC::PrintTypeObject(name = TEXT)
                    [FUNCTION START] SystemC::defineObject(name = TEXT)
                      [FUNCTION START] SystemC::openHierarchy
                      [FUNCTION END] SystemC::openHierarchy
                      [DEBUG] SystemC::Declaration
                      [FUNCTION START] SystemC::closeHierarchy
                      [FUNCTION END] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::defineObject
                  [FUNCTION END] SystemC::PrintTypeObject
                [FUNCTION END] SystemC::PrintFactory
              [FUNCTION END] SystemC::SimpleType
            [FUNCTION END] SystemC::FileType
            [DEBUG] SystemC::Hierarchy: STD.TEXTIO
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::type_declarations(name = SIDE)
            [FUNCTION START] SystemC::enumerationType
              [FUNCTION START] SystemC::PrintFactory(name = SIDE)
                [FUNCTION START] SystemC::PrintTypeObject(name = SIDE)
                  [FUNCTION START] SystemC::defineObject(name = SIDE)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::enumerationType
            [DEBUG] SystemC::Hierarchy: STD.TEXTIO
          [FUNCTION END] SystemC::type_declarations
          [FUNCTION START] SystemC::subtype_declarations(name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::NATURAL
            [FUNCTION START] SystemC::PrintFactory(name = WIDTH, expected_value = integer)
              [FUNCTION START] SystemC::PrintFactory(name = WIDTH)
                [FUNCTION START] SystemC::PrintTypeObject(name = WIDTH)
                  [FUNCTION START] SystemC::defineObject(name = WIDTH)
                    [FUNCTION START] SystemC::openHierarchy
                    [FUNCTION END] SystemC::openHierarchy
                    [DEBUG] SystemC::Declaration
                    [FUNCTION START] SystemC::closeHierarchy
                    [FUNCTION END] SystemC::closeHierarchy
                  [FUNCTION END] SystemC::defineObject
                [FUNCTION END] SystemC::PrintTypeObject
              [FUNCTION END] SystemC::PrintFactory
            [FUNCTION END] SystemC::PrintFactory
          [FUNCTION END] SystemC::subtype_declarations
          [FUNCTION START] SystemC::FileDeclaration(name = INPUT, type = TEXT, direction = READ_MODE)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = READ_MODE)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum READ_MODE: enumeration FILE_OPEN_KIND (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum READ_MODE: enumeration FILE_OPEN_KIND (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::FILE_OPEN_KIND_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::FILE_OPEN_KIND_enum::READ_MODE
          [FUNCTION END] SystemC::FileDeclaration
          [FUNCTION START] SystemC::FileDeclaration(name = OUTPUT, type = TEXT, direction = WRITE_MODE)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = WRITE_MODE)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WRITE_MODE: enumeration FILE_OPEN_KIND (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WRITE_MODE: enumeration FILE_OPEN_KIND (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::FILE_OPEN_KIND_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::FILE_OPEN_KIND_enum::WRITE_MODE
          [FUNCTION END] SystemC::FileDeclaration
          [FUNCTION START] SystemC::function_declarations(name = READLINE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITELINE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::NATURAL
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_NATURAL.create()
                    [DEBUG] SystemC::Name = DIGITS, type = STD::STANDARD::NATURAL
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::NATURAL
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_NATURAL.create()
                    [DEBUG] SystemC::Name = DIGITS, type = STD::STANDARD::NATURAL
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::NATURAL
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_NATURAL.create()
                    [DEBUG] SystemC::Name = DIGITS, type = STD::STANDARD::NATURAL
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = UNIT, type = STD::STANDARD::TIME
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = NS)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = NS)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = physical
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = physical
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = NS, expected_type = physical)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum NS: physical (visible), arguments = )
            [DEBUG] ExpressionParser::Return type physical == physical
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = NS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum NS: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum NS: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::TIME_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME_enum::NS
            [DEBUG] ExpressionParser::name = STD::STANDARD::TIME_enum::NS: STD.STANDARD enum NS: physical (visible) (global)
          [FUNCTION END] ExpressionParser::objectToString = STD::STANDARD::TIME_enum::NS
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = STD::STANDARD::TIME_enum::NS
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = STD::STANDARD::TIME_enum::NS
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = STD::STANDARD::TIME_enum::NS
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = UNIT, type = STD::STANDARD::TIME
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = NS)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = NS)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = physical
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = physical
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = NS, expected_type = physical)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum NS: physical (visible), arguments = )
            [DEBUG] ExpressionParser::Return type physical == physical
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = NS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum NS: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum NS: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::TIME_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME_enum::NS
            [DEBUG] ExpressionParser::name = STD::STANDARD::TIME_enum::NS: STD.STANDARD enum NS: physical (visible) (global)
          [FUNCTION END] ExpressionParser::objectToString = STD::STANDARD::TIME_enum::NS
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = STD::STANDARD::TIME_enum::NS
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = STD::STANDARD::TIME_enum::NS
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = STD::STANDARD::TIME_enum::NS
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = UNIT, type = STD::STANDARD::TIME
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = NS)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = NS)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = physical
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = physical
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = NS, expected_type = physical)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum NS: physical (visible), arguments = )
            [DEBUG] ExpressionParser::Return type physical == physical
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = NS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum NS: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum NS: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::TIME_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME_enum::NS
            [DEBUG] ExpressionParser::name = STD::STANDARD::TIME_enum::NS: STD.STANDARD enum NS: physical (visible) (global)
          [FUNCTION END] ExpressionParser::objectToString = STD::STANDARD::TIME_enum::NS
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = STD::STANDARD::TIME_enum::NS
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = STD::STANDARD::TIME_enum::NS
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = STD::STANDARD::TIME_enum::NS
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READLINE, arguments = 
              [DEBUG] SystemC::Match: procedure READLINE(F : TEXT(file), L : LINE(access)): none [ATTRIBUTE] (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                      [DEBUG] SystemC::Name = F, type = TEXT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                      [DEBUG] SystemC::Name = F, type = TEXT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : BIT(enumeration BIT),  : BOOLEAN(enumeration BOOLEAN)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : BIT(enumeration BIT)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : BIT_VECTOR(array(integer) of enumeration BIT),  : BOOLEAN(enumeration BOOLEAN)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : BIT_VECTOR(array(integer) of enumeration BIT)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : BOOLEAN(enumeration BOOLEAN),  : BOOLEAN(enumeration BOOLEAN)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : BOOLEAN(enumeration BOOLEAN)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : CHARACTER(enumeration CHARACTER),  : BOOLEAN(enumeration BOOLEAN)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : CHARACTER(enumeration CHARACTER)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : INTEGER(integer),  : BOOLEAN(enumeration BOOLEAN)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : INTEGER(integer)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : REAL(integer),  : BOOLEAN(enumeration BOOLEAN)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : REAL(integer)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : STRING(array(integer) of enumeration CHARACTER),  : BOOLEAN(enumeration BOOLEAN)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : STRING(array(integer) of enumeration CHARACTER)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : TIME(physical),  : BOOLEAN(enumeration BOOLEAN)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical)): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = READ, arguments =  : LINE(access),  : TIME(physical)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = WRITELINE, arguments = 
              [DEBUG] SystemC::Match: procedure WRITELINE(F : TEXT(file), L : LINE(access)): none [ATTRIBUTE] (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                      [DEBUG] SystemC::Name = F, type = TEXT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                      [DEBUG] SystemC::Name = F, type = TEXT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = WRITE, arguments =  : LINE(access),  : BIT(enumeration BIT),  : SIDE(enumeration SIDE),  : WIDTH(integer)
              [DEBUG] SystemC::Match: procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = WRITE, arguments =  : LINE(access),  : BIT_VECTOR(array(integer) of enumeration BIT),  : SIDE(enumeration SIDE),  : WIDTH(integer)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = WRITE, arguments =  : LINE(access),  : BOOLEAN(enumeration BOOLEAN),  : SIDE(enumeration SIDE),  : WIDTH(integer)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = WRITE, arguments =  : LINE(access),  : CHARACTER(enumeration CHARACTER),  : SIDE(enumeration SIDE),  : WIDTH(integer)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = WRITE, arguments =  : LINE(access),  : INTEGER(integer),  : SIDE(enumeration SIDE),  : WIDTH(integer)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = WRITE, arguments =  : LINE(access),  : REAL(integer),  : SIDE(enumeration SIDE),  : WIDTH(integer),  : NATURAL(integer)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::NATURAL
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_NATURAL.create()
                      [DEBUG] SystemC::Name = DIGITS, type = STD::STANDARD::NATURAL
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::NATURAL
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_NATURAL.create()
                      [DEBUG] SystemC::Name = DIGITS, type = STD::STANDARD::NATURAL
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = WRITE, arguments =  : LINE(access),  : STRING(array(integer) of enumeration CHARACTER),  : SIDE(enumeration SIDE),  : WIDTH(integer)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
            [FUNCTION START] SystemC::ForeignAttribute
              [DEBUG] SystemC::id = procedure, name = WRITE, arguments =  : LINE(access),  : TIME(physical),  : SIDE(enumeration SIDE),  : WIDTH(integer),  : TIME(physical)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Different: procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [DEBUG] SystemC::Match: procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none [ATTRIBUTE] (hidden)
              [FUNCTION START] SystemC::GetInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = UNIT, type = STD::STANDARD::TIME
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = NS)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = NS)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = physical
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = physical
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = NS, expected_type = physical)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum NS: physical (visible), arguments = )
            [DEBUG] ExpressionParser::Return type physical == physical
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = NS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum NS: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum NS: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::TIME_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME_enum::NS
            [DEBUG] ExpressionParser::name = STD::STANDARD::TIME_enum::NS: STD.STANDARD enum NS: physical (visible) (global)
          [FUNCTION END] ExpressionParser::objectToString = STD::STANDARD::TIME_enum::NS
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = STD::STANDARD::TIME_enum::NS
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = STD::STANDARD::TIME_enum::NS
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = STD::STANDARD::TIME_enum::NS
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::GetInterface
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (local)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (local)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (local), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = UNIT, type = STD::STANDARD::TIME
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = NS)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = NS)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = physical
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = physical
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = NS, expected_type = physical)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum NS: physical (visible), arguments = )
            [DEBUG] ExpressionParser::Return type physical == physical
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = NS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum NS: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum NS: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::TIME_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME_enum::NS
            [DEBUG] ExpressionParser::name = STD::STANDARD::TIME_enum::NS: STD.STANDARD enum NS: physical (visible) (global)
          [FUNCTION END] ExpressionParser::objectToString = STD::STANDARD::TIME_enum::NS
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = STD::STANDARD::TIME_enum::NS
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = STD::STANDARD::TIME_enum::NS
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = STD::STANDARD::TIME_enum::NS
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
            [FUNCTION END] SystemC::ForeignAttribute
          [FUNCTION END] SystemC::attribute_declarations
          [FUNCTION START] SystemC::attribute_declarations
          [FUNCTION END] SystemC::attribute_declarations
        [FUNCTION END] SystemC::declarations
        [DEBUG] SystemC::Constructor
        [FUNCTION START] SystemC::closeHierarchy
        [FUNCTION END] SystemC::closeHierarchy
      [FUNCTION END] SystemC::defineObject
    [FUNCTION END] SystemC::packageDeclaration
    [DEBUG] SystemC::Parsing design unit
    [FUNCTION START] SystemC::packageDeclaration(library = std, packet = TEXTIO, type = package_body)
      [FUNCTION START] SystemC::defineObject(name = TEXTIO)
        [FUNCTION START] SystemC::openHierarchy
        [FUNCTION END] SystemC::openHierarchy
        [DEBUG] SystemC::Declaration
        [FUNCTION START] SystemC::declarations
          [FUNCTION START] SystemC::function_declarations(name = READLINE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READLINE_text_line__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READLINE_text_line__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_TEXT.create()
                      [DEBUG] SystemC::Name = F, type = TEXT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READLINE_text_line__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READLINE, arguments = F : TEXT(file), L : LINE(access)
[32m                [DEBUG] SystemC::Match = procedure READLINE(F : TEXT(file), L : LINE(access)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_readline
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READLINE ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_bit_boolean__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_bit_boolean__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)
[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read1
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_bit__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_bit__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : BIT(enumeration BIT)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read2
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_bit_vector_boolean__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_bit_vector_boolean__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read3
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_bit_vector__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_bit_vector__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read4
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_boolean_boolean__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_boolean_boolean__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read5
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_boolean__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_boolean__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read6
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_character_boolean__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_character_boolean__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read7
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_character__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_character__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read8
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_integer_boolean__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_integer_boolean__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read9
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_integer__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_integer__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : INTEGER(integer)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read10
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_real_boolean__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_real_boolean__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read11
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_real__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_real__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : REAL(integer)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read12
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_string_boolean__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_string_boolean__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read13
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_string__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_string__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read14
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_time_boolean__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_time_boolean__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read15
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = GOOD, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = READ)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = READ_line_time__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.READ_line_time__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = READ, arguments = L : LINE(access), VALUE : TIME(physical)
[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT(enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : INTEGER(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : REAL(integer)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER)): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure READ(L : LINE(access), VALUE : TIME(physical), GOOD : BOOLEAN(enumeration BOOLEAN)): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure READ(L : LINE(access), VALUE : TIME(physical)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_read16
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to READ ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITELINE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = WRITELINE_text_line__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITELINE_text_line__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_TEXT.create()
                      [DEBUG] SystemC::Name = F, type = TEXT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITELINE_text_line__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = WRITELINE, arguments = F : TEXT(file), L : LINE(access)
[32m                [DEBUG] SystemC::Match = procedure WRITELINE(F : TEXT(file), L : LINE(access)): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_writeline
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to WRITELINE ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TEXT)
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: TEXT
[FUNCTION START] NameConverter::getName::getName(name = TEXT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type TEXT: file (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type TEXT: file (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_TEXT.create()
                    [DEBUG] SystemC::Name = F, type = TEXT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = WRITE_line_bit_side_width__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_bit_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_bit_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_bit_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = WRITE, arguments = L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]
[32m                [DEBUG] SystemC::Match = procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_write1
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to WRITE ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT)
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT
[FUNCTION START] NameConverter::getName::getName(name = BIT)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT: enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT: enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = WRITE_line_bit_vector_side_width__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_bit_vector_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_bit_vector_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_bit_vector_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = WRITE, arguments = L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]
[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_write2
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to WRITE ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BIT_VECTOR)
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BIT_VECTOR
[FUNCTION START] NameConverter::getName::getName(name = BIT_VECTOR)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BIT_VECTOR: array(integer) of enumeration BIT (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BIT_VECTOR.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BIT_VECTOR
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = WRITE_line_boolean_side_width__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_boolean_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_boolean_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_boolean_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = WRITE, arguments = L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]
[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_write3
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to WRITE ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = BOOLEAN)
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::BOOLEAN
[FUNCTION START] NameConverter::getName::getName(name = BOOLEAN)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type BOOLEAN: enumeration BOOLEAN (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_BOOLEAN.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::BOOLEAN
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = WRITE_line_character_side_width__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_character_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_character_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_character_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = WRITE, arguments = L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]
[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_write4
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to WRITE ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = CHARACTER)
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::CHARACTER
[FUNCTION START] NameConverter::getName::getName(name = CHARACTER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type CHARACTER: enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_CHARACTER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::CHARACTER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = WRITE_line_integer_side_width__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_integer_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_integer_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_integer_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = WRITE, arguments = L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]
[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_write5
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to WRITE ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = INTEGER)
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::INTEGER
[FUNCTION START] NameConverter::getName::getName(name = INTEGER)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type INTEGER: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type INTEGER: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_INTEGER.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::INTEGER
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::NATURAL
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_NATURAL.create()
                    [DEBUG] SystemC::Name = DIGITS, type = STD::STANDARD::NATURAL
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::NATURAL
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_NATURAL.create()
                    [DEBUG] SystemC::Name = DIGITS, type = STD::STANDARD::NATURAL
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = WRITE_line_real_side_width_natural__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_real_side_width_natural__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_real_side_width_natural__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_real_side_width_natural__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::NATURAL
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_NATURAL.create()
                      [DEBUG] SystemC::Name = DIGITS, type = STD::STANDARD::NATURAL
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = WRITE, arguments = L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]
[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_write6
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to WRITE ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = REAL)
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::REAL
[FUNCTION START] NameConverter::getName::getName(name = REAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type REAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type REAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_REAL.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::REAL
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = NATURAL)
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::NATURAL
[FUNCTION START] NameConverter::getName::getName(name = NATURAL)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type NATURAL: integer (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type NATURAL: integer (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_NATURAL.create()
                    [DEBUG] SystemC::Name = DIGITS, type = STD::STANDARD::NATURAL
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = WRITE_line_string_side_width__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_string_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_string_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_string_side_width__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = WRITE, arguments = L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]
[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_write7
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to WRITE ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = STRING)
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::STRING
[FUNCTION START] NameConverter::getName::getName(name = STRING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type STRING: array(integer) of enumeration CHARACTER (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_STRING.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::STRING
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
          [FUNCTION START] SystemC::function_declarations(name = WRITE)
            [FUNCTION START] SystemC::FunctionReturn
            [FUNCTION END] SystemC::FunctionReturn: name = void, local = 0
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = UNIT, type = STD::STANDARD::TIME
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = NS)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = NS)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = physical
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = physical
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = NS, expected_type = physical)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum NS: physical (visible), arguments = )
            [DEBUG] ExpressionParser::Return type physical == physical
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = NS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum NS: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum NS: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::TIME_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME_enum::NS
            [DEBUG] ExpressionParser::name = STD::STANDARD::TIME_enum::NS: STD.STANDARD enum NS: physical (visible) (global)
          [FUNCTION END] ExpressionParser::objectToString = STD::STANDARD::TIME_enum::NS
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = STD::STANDARD::TIME_enum::NS
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = STD::STANDARD::TIME_enum::NS
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = STD::STANDARD::TIME_enum::NS
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = UNIT, type = STD::STANDARD::TIME
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = NS)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = NS)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = physical
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = physical
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = NS, expected_type = physical)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum NS: physical (visible), arguments = )
            [DEBUG] ExpressionParser::Return type physical == physical
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = NS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum NS: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum NS: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::TIME_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME_enum::NS
            [DEBUG] ExpressionParser::name = STD::STANDARD::TIME_enum::NS: STD.STANDARD enum NS: physical (visible) (global)
          [FUNCTION END] ExpressionParser::objectToString = STD::STANDARD::TIME_enum::NS
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = STD::STANDARD::TIME_enum::NS
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = STD::STANDARD::TIME_enum::NS
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = STD::STANDARD::TIME_enum::NS
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [FUNCTION START] SystemC::defineObject(name = WRITE_line_time_side_width_time__none)
              [FUNCTION START] SystemC::openHierarchy
              [FUNCTION END] SystemC::openHierarchy
              [DEBUG] SystemC::Declaration
              [FUNCTION START] SystemC::declarations
                [FUNCTION START] SystemC::attribute_declarations
                  [DEBUG] SystemC::Ignoring SYNTHESIS_RETURN attribute
                [FUNCTION END] SystemC::attribute_declarations
              [FUNCTION END] SystemC::declarations
              [FUNCTION START] SystemC::PrintInterface
                [FUNCTION START] SystemC::interfaceListToString
                  [FUNCTION START] SystemC::traverseInterfaceList
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_time_side_width_time__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_LINE.create()
                      [DEBUG] SystemC::Name = L, type = LINE
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_time_side_width_time__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_SIDE.create()
                      [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 3, current hierarchy = STD.TEXTIO.WRITE_line_time_side_width_time__none, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: p->factory_
[FUNCTION END] NameConverter::getName::getName: p->factory_WIDTH.create()
                      [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = 0
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                    [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                      [DEBUG] SystemC::Name = UNIT, type = STD::STANDARD::TIME
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = NS)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = NS)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = physical
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = physical
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = NS, expected_type = physical)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum NS: physical (visible), arguments = )
            [DEBUG] ExpressionParser::Return type physical == physical
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = NS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum NS: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum NS: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::TIME_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME_enum::NS
            [DEBUG] ExpressionParser::name = STD::STANDARD::TIME_enum::NS: STD.STANDARD enum NS: physical (visible) (global)
          [FUNCTION END] ExpressionParser::objectToString = STD::STANDARD::TIME_enum::NS
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = STD::STANDARD::TIME_enum::NS
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = STD::STANDARD::TIME_enum::NS
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                      [DEBUG] SystemC::Init = STD::STANDARD::TIME_enum::NS
[0m                    [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION END] SystemC::traverseInterfaceList
                [FUNCTION END] SystemC::interfaceListToString
              [FUNCTION END] SystemC::PrintInterface
              [FUNCTION START] SystemC::FunctionAttribute, name = WRITE, arguments = L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]
[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT(enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BIT_VECTOR(array(integer) of enumeration BIT), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : BOOLEAN(enumeration BOOLEAN), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : CHARACTER(enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : INTEGER(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : REAL(integer), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], DIGITS : NATURAL(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[31m                [DEBUG] SystemC::Different = procedure WRITE(L : LINE(access), VALUE : STRING(array(integer) of enumeration CHARACTER), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m[32m                [DEBUG] SystemC::Match = procedure WRITE(L : LINE(access), VALUE : TIME(physical), JUSTIFIED : SIDE(enumeration SIDE) := [DEFAULT], FIELD : WIDTH(integer) := [DEFAULT], UNIT : TIME(physical) := [DEFAULT]): none [ATTRIBUTE] (hidden)
[0m                [DEBUG] SystemC::Foreign name = std_textio_write8
              [FUNCTION END] SystemC::FunctionAttribute
              [FUNCTION START] SystemC::sequentialStatements
                [FUNCTION START] SystemC::reportStatement
[FUNCTION START] NameConverter::getName::getName(name = WARNING)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum WARNING: enumeration SEVERITY_LEVEL (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::SEVERITY_LEVEL_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::SEVERITY_LEVEL_enum::WARNING
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = array() of enumeration 
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = array() of enumeration 
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::String
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = "Procedure call to WRITE ignored for synthesis"
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
                [FUNCTION END] SystemC::reportStatement
              [FUNCTION END] SystemC::sequentialStatements
              [DEBUG] SystemC::Constructor
              [FUNCTION START] SystemC::closeHierarchy
              [FUNCTION END] SystemC::closeHierarchy
            [FUNCTION END] SystemC::defineObject
            [FUNCTION START] SystemC::GetInterface
              [FUNCTION START] SystemC::interfaceListToString
                [FUNCTION START] SystemC::traverseInterfaceList
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = LINE)
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: LINE
[FUNCTION START] NameConverter::getName::getName(name = LINE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type LINE: access (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type LINE: access (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_LINE.create()
                    [DEBUG] SystemC::Name = L, type = LINE
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = VALUE, type = STD::STANDARD::TIME
                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = SIDE)
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: SIDE
[FUNCTION START] NameConverter::getName::getName(name = SIDE)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type SIDE: enumeration SIDE (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_SIDE.create()
                    [DEBUG] SystemC::Name = JUSTIFIED, type = SIDE
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = RIGHT)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = RIGHT)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = enumeration SIDE
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = enumeration SIDE
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = enumeration SIDE
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = enumeration SIDE
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = RIGHT, expected_type = enumeration SIDE)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum RIGHT: enumeration SIDE (hidden), arguments = )
            [DEBUG] ExpressionParser::Return type enumeration SIDE == enumeration SIDE
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = RIGHT)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: SIDE_enum::
[FUNCTION END] NameConverter::getName::getName: SIDE_enum::RIGHT
            [DEBUG] ExpressionParser::name = SIDE_enum::RIGHT: std.TEXTIO enum RIGHT: enumeration SIDE (hidden) (global)
          [FUNCTION END] ExpressionParser::objectToString = SIDE_enum::RIGHT
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = SIDE_enum::RIGHT
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = SIDE_enum::RIGHT
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = SIDE_enum::RIGHT
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = WIDTH)
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 1
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: 
[FUNCTION END] NameConverter::getName::getName: WIDTH
[FUNCTION START] NameConverter::getName::getName(name = WIDTH)
  [DEBUG] NameConverter::getName::Object = std.TEXTIO type WIDTH: integer (hidden) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = std.TEXTIO type WIDTH: integer (hidden) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 1
  [DEBUG] NameConverter::globalPrefix::hierarchyLevel = 2, current hierarchy = STD.TEXTIO, object hierarchy size = 2
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: factory_
[FUNCTION END] NameConverter::getName::getName: factory_WIDTH.create()
                    [DEBUG] SystemC::Name = FIELD, type = WIDTH
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = integer
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = integer
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [DEBUG] ExpressionParser::Number
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = 0
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = 0
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                  [FUNCTION START] SystemC::ObjectDeclaration(type_name = TIME)
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME
[FUNCTION START] NameConverter::getName::getName(name = TIME)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD type TIME: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD type TIME: physical (visible) (global), factory_extension = 1)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD_STANDARD.
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD_STANDARD.factory_
[FUNCTION END] NameConverter::getName::getName: STD_STANDARD.factory_TIME.create()
                    [DEBUG] SystemC::Name = UNIT, type = STD::STANDARD::TIME
[FUNCTION START] ExpressionParser::toString
  [FUNCTION START] ExpressionParser::toString
    [FUNCTION START] ExpressionParser::CollectAllReturnTypes
      [FUNCTION START] ExpressionParser::ExpressionReturnTypes
        [FUNCTION START] ExpressionParser::ExpressionTermReturnTypes
[32m          [FUNCTION START] ExpressionParser::BasicIdentifierReturnTypes(name = NS)
[0m            [FUNCTION START] ExpressionParser::GetReturnTypes(name = NS)
              [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m                [DEBUG] ExpressionParser::Result = physical
[0m              [FUNCTION END] ExpressionParser::ReturnTypesToString
            [FUNCTION END] ExpressionParser::GetReturnTypes = physical
            [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m              [DEBUG] ExpressionParser::Result = physical
[0m            [FUNCTION END] ExpressionParser::ReturnTypesToString
          [FUNCTION END] ExpressionParser::BasicIdentifierReturnTypes = physical
        [FUNCTION END] ExpressionParser::ExpressionTermReturnTypes
        [FUNCTION START] ExpressionParser::ReturnTypesToString
[32m          [DEBUG] ExpressionParser::Result = physical
[0m        [FUNCTION END] ExpressionParser::ReturnTypesToString
      [FUNCTION END] ExpressionParser::expressionReturnTypes = physical
    [FUNCTION END] ExpressionParser::CollectAllReturnTypes
    [FUNCTION START] ExpressionParser::expressionToString
      [FUNCTION START] ExpressionParser::expressionTermToString
        [FUNCTION START] ExpressionParser::toObjectArguments
        [FUNCTION END] ExpressionParser::toObjectArguments = 
[32m        [FUNCTION START] ExpressionParser::BasicIdentifierToString(name = NS, expected_type = physical)
[0m          [FUNCTION START] ExpressionParser::objectWithArguments(e = enum NS: physical (visible), arguments = )
            [DEBUG] ExpressionParser::Return type physical == physical
          [FUNCTION END] ExpressionParser::objectWithArguments = true
          [FUNCTION START] ExpressionParser::objectToString
[FUNCTION START] NameConverter::getName::getName(name = NS)
  [DEBUG] NameConverter::getName::Object = STD.STANDARD enum NS: physical (visible) (global)
[FUNCTION START] NameConverter::globalPrefix::globalPrefix(object = STD.STANDARD enum NS: physical (visible) (global), factory_extension = 0)
  [DEBUG] NameConverter::globalPrefix::Local = 0
[FUNCTION START] NameConverter::getPrefix::getPrefix
[FUNCTION END] NameConverter::getPrefix::getPrefix: STD::STANDARD::
[FUNCTION END] NameConverter::globalPrefix::globalPrefix: STD::STANDARD::TIME_enum::
[FUNCTION END] NameConverter::getName::getName: STD::STANDARD::TIME_enum::NS
            [DEBUG] ExpressionParser::name = STD::STANDARD::TIME_enum::NS: STD.STANDARD enum NS: physical (visible) (global)
          [FUNCTION END] ExpressionParser::objectToString = STD::STANDARD::TIME_enum::NS
        [FUNCTION END] ExpressionParser::BasicIdentifierToString = STD::STANDARD::TIME_enum::NS
      [FUNCTION END] ExpressionParser::expressionTermToString
    [FUNCTION END] ExpressionParser::expressionToString = STD::STANDARD::TIME_enum::NS
  [FUNCTION END] ExpressionParser::toString
[FUNCTION END] ExpressionParser::toString
[32m                    [DEBUG] SystemC::Init = STD::STANDARD::TIME_enum::NS
[0m                  [FUNCTION END] SystemC::ObjectDeclaration
                [FUNCTION END] SystemC::traverseInterfaceList
              [FUNCTION END] SystemC::interfaceListToString
            [FUNCTION END] SystemC::GetInterface
            [DEBUG] SystemC::Function declaration body
          [FUNCTION END] SystemC::function_declarations
        [FUNCTION END] SystemC::declarations
        [DEBUG] SystemC::Constructor
        [FUNCTION START] SystemC::closeHierarchy
        [FUNCTION END] SystemC::closeHierarchy
      [FUNCTION END] SystemC::defineObject
    [FUNCTION END] SystemC::packageDeclaration
  [FUNCTION END] SystemC::parse
[FUNCTION END] SystemC::generate
g++ -std=c++14 -g -MMD -fconcepts -fmax-errors=5  -I/home/ljj/jhdl/std/../systemc/systemc-2.3.3/include -I. -I/home/ljj/jhdl/std/../src/kernel/lib -L/home/ljj/jhdl/std/../systemc/systemc-2.3.3/lib-linux64 -lsystemc -c env_foreign.cpp -o env_foreign.o -I../src/kernel/lib 
g++ -std=c++14 -g -MMD -fconcepts -fmax-errors=5  -I/home/ljj/jhdl/std/../systemc/systemc-2.3.3/include -I. -I/home/ljj/jhdl/std/../src/kernel/lib -L/home/ljj/jhdl/std/../systemc/systemc-2.3.3/lib-linux64 -lsystemc -c standard_foreign.cpp -o standard_foreign.o -I../src/kernel/lib 
g++ -std=c++14 -g -MMD -fconcepts -fmax-errors=5  -I/home/ljj/jhdl/std/../systemc/systemc-2.3.3/include -I. -I/home/ljj/jhdl/std/../src/kernel/lib -L/home/ljj/jhdl/std/../systemc/systemc-2.3.3/lib-linux64 -lsystemc -c textio_foreign.cpp -o textio_foreign.o -I../src/kernel/lib 
g++ -std=c++14 -g -MMD -fconcepts -fmax-errors=5  -I/home/ljj/jhdl/std/../systemc/systemc-2.3.3/include -I. -I/home/ljj/jhdl/std/../src/kernel/lib -L/home/ljj/jhdl/std/../systemc/systemc-2.3.3/lib-linux64 -lsystemc -c textio.cpp -o textio.o -I../src/kernel/lib 
g++ -std=c++14 -g -MMD -fconcepts -fmax-errors=5  -I/home/ljj/jhdl/std/../systemc/systemc-2.3.3/include -I. -I/home/ljj/jhdl/std/../src/kernel/lib -L/home/ljj/jhdl/std/../systemc/systemc-2.3.3/lib-linux64 -lsystemc -c env.cpp -o env.o -I../src/kernel/lib 
g++ -std=c++14 -g -MMD -fconcepts -fmax-errors=5  -I/home/ljj/jhdl/std/../systemc/systemc-2.3.3/include -I. -I/home/ljj/jhdl/std/../src/kernel/lib -L/home/ljj/jhdl/std/../systemc/systemc-2.3.3/lib-linux64 -lsystemc -c standard.cpp -o standard.o -I../src/kernel/lib 
