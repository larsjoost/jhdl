#ifndef ENV_VHD_HPP
#define ENV_VHD_HPP
// Autogenerated from source env.vhd
#include <vhdl.h>
#include <systemc.h>
#include <string.h>
#include "std_standard.hpp"
#include <standard.h>
namespace STD {
// Area Content (name = ENV, hierarchy = 0, active = false)
struct Package_ENV {
Package_ENV() {
}; // constructor ENV end
virtual void STOP(STD::STANDARD::INTEGER STATUS) = 0;
virtual void STOP() = 0;
virtual void FINISH(STD::STANDARD::INTEGER STATUS) = 0;
virtual void FINISH() = 0;
virtual STD::STANDARD::DELAY_LENGTH RESOLUTION_LIMIT() = 0;
/*
 * This is the definition of the foreign function set as an attribute.
 * The implementation must be defined in a .cpp file in this directory.
*/
void vhdl_stop(STD::STANDARD::INTEGER STATUS);
/*
 * This is the definition of the foreign function set as an attribute.
 * The implementation must be defined in a .cpp file in this directory.
*/
void vhdl_finish(STD::STANDARD::INTEGER STATUS);
/*
 * This is the definition of the foreign function set as an attribute.
 * The implementation must be defined in a .cpp file in this directory.
*/
STD::STANDARD::DELAY_LENGTH vhdl_resolution_limit();
}; // class ENV end
// Area Content (name = ENV, hierarchy = 0, active = false)
struct Package_body_ENV : public Package_ENV {
Package_body_ENV() {
}; // constructor ENV end
void STOP(STD::STANDARD::INTEGER STATUS){
auto inst = Procedure_STOP_integer__none(this);
inst.run(STATUS);
}
void STOP(){
auto inst = Procedure_STOP__none(this);
inst.run();
}
void FINISH(STD::STANDARD::INTEGER STATUS){
auto inst = Procedure_FINISH_integer__none(this);
inst.run(STATUS);
}
void FINISH(){
auto inst = Procedure_FINISH__none(this);
inst.run();
}
STD::STANDARD::DELAY_LENGTH RESOLUTION_LIMIT(){
auto inst = Function_RESOLUTION_LIMIT__physical(this);
return inst.run();
}
// Area Content (name = STOP_integer__none, hierarchy = 1, active = false)
struct Procedure_STOP_integer__none {
Procedure_STOP_integer__none(Package_ENV* parent) : p(parent) {
}; // constructor STOP_integer__none end
Package_ENV* p = NULL; // Used to access parent class.
void run(STD::STANDARD::INTEGER STATUS){
// Foreign function call
return p->vhdl_stop(STATUS);
}
}; // class STOP_integer__none end
// Area Content (name = STOP__none, hierarchy = 1, active = false)
struct Procedure_STOP__none {
Procedure_STOP__none(Package_ENV* parent) : p(parent) {
}; // constructor STOP__none end
Package_ENV* p = NULL; // Used to access parent class.
void run(){
}
}; // class STOP__none end
// Area Content (name = FINISH_integer__none, hierarchy = 1, active = false)
struct Procedure_FINISH_integer__none {
Procedure_FINISH_integer__none(Package_ENV* parent) : p(parent) {
}; // constructor FINISH_integer__none end
Package_ENV* p = NULL; // Used to access parent class.
void run(STD::STANDARD::INTEGER STATUS){
// Foreign function call
return p->vhdl_finish(STATUS);
}
}; // class FINISH_integer__none end
// Area Content (name = FINISH__none, hierarchy = 1, active = false)
struct Procedure_FINISH__none {
Procedure_FINISH__none(Package_ENV* parent) : p(parent) {
}; // constructor FINISH__none end
Package_ENV* p = NULL; // Used to access parent class.
void run(){
}
}; // class FINISH__none end
// Area Content (name = RESOLUTION_LIMIT__physical, hierarchy = 1, active = false)
struct Function_RESOLUTION_LIMIT__physical {
Function_RESOLUTION_LIMIT__physical(Package_ENV* parent) : p(parent) {
}; // constructor RESOLUTION_LIMIT__physical end
Package_ENV* p = NULL; // Used to access parent class.
STD::STANDARD::DELAY_LENGTH run(){
// Foreign function call
return p->vhdl_resolution_limit();
}
}; // class RESOLUTION_LIMIT__physical end
}; // class ENV end
using ENV = Package_body_ENV;
} // namespace STD end 
extern STD::ENV STD_ENV;
#endif
