#!/bin/bash

set -e

SCRIPT=$(realpath $0)
SCRIPTPATH=$(dirname $SCRIPT)

function error {
    local message=$1
    echo "[ERROR] $SCRIPT: $message" 1>&2
}

usage()
{
    cat << EOF
Command: $0 $ALL_ARGUMENTS

usage: $0 options

OPTIONS:
   -h           Show this message
   -f <name>    Filename
   -d <name>    Do filename
   -o <name>    VCD output filename
   -x           Debug
   -v           Verbose 
EOF
}

MAX_ERRORS=5

while getopts ":hd:f:o:vxy" OPTION
do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        f)
            FILENAME="$OPTARG"
            ;;
        d)
            DO_FILENAME="-d $OPTARG"
            ;;
        o)
            VCD_FILENAME="$OPTARG"
            ;;
        v)
            VERBOSE="-v"
            ;;
        x)
            DEBUG="gdb --args"
	    HDLC_DEBUG="-x"
            ;;
        y)
            DEBUG="valgrind --leak-check=yes"
            ;;
        ?)
            echo "Unknown option $OPTARG"
            usage
            exit 1
            ;;
        :)
            echo "No argument value for option $OPTARG"
            usage
            exit 1
            ;;
    esac
done

if [ -z "$FILENAME" ]; then
    error "Filename must be specified"
    usage
    exit 1
fi

if [ -z "$JHDL" ]; then
    export JHDL=$SCRIPTPATH/../
fi

source $SCRIPTPATH/setup.sh

KERNEL=$SCRIPTPATH/kernel/lib

make -C $KERNEL > /dev/null

filebase="${FILENAME%.*}"
$SCRIPTPATH/hdlc.sh -f $FILENAME $VERBOSE $HDLC_DEBUG
headerfile="$filebase.hpp"
sourcefile="$filebase.cpp"
targetdir=$(dirname $FILENAME)
templatefiles=$(ls $SCRIPTPATH/templates/*.cpp)
for i in $templatefiles; do
    target=$targetdir/$(basename "$i")
    if [ ! -e $target ]; then
        cp $i $target
        MODULE_NAME=$($SCRIPTPATH/hdlf -f $FILENAME)
        sed -i "s/%module%/${MODULE_NAME}/g" $target
        sed -i "s/%include%/$headerfile/g" $target
    fi
done
cp $SCRIPTPATH/templates/Makefile $targetdir
make -C $targetdir
INCLUDE_PATHS=$(cat $targetdir/$filebase.i)
INCLUDES=""
for i in $INCLUDE_PATHS; do
    INCLUDES+=" -I$i"
done
g++ -std=c++14 -fconcepts -g -lgomp -fmax-errors=${MAX_ERRORS} -I$SCRIPTPATH/kernel/lib -I$SYSTEMC/include -L$SYSTEMC/lib-linux64 -lsystemc $INCLUDES -o $filebase *.o $KERNEL/*.o $SCRIPTPATH/../std/*.o
if [ -n "$VCD_FILENAME" ]; then
    if [ ! -e $VCD_FILENAME ]; then
        mkfifo --mode=666 $VCD_FILENAME
    fi
    shmidcat $VCD_FILENAME | gtkwave -v -I output.sav &
    $DEBUG ./$filebase $DO_FILENAME -o $VCD_FILENAME $VERBOSE 
else
    $DEBUG ./$filebase $DO_FILENAME $VERBOSE
fi
